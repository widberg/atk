var commandNames = [];
var excludedCommands = [];
var logCommands = false;

const games = {

  //////////
  // FUEL //
  //////////

  "fuel": () => {
    const fuelModule = Process.enumerateModules()[0];
    Memory.protect(fuelModule.base, fuelModule.size, "rwx");
    var isDemo = false;
    
    var nppGlobalCommandState;
    var nppGlobalCommandStatePattern = "a1 ?? ?? ?? ?? d9 05 ?? ?? 9d 00 6a 00 d9 1d ?? ?? a7 00 68 ?? ?? 9c 00 50 c6 05 ?? ?? a7 00 00 e8 3a 13 01 00 83 05 ?? ?? a7 00 01 80 3d 79 ?? a6 00 00 75 f7 e8 85 f9 ff ff e8 ?? 71 19 00 84 c0";
    var nppGlobalCommandStateScanResults = Memory.scanSync(fuelModule.base, fuelModule.size, nppGlobalCommandStatePattern);
    if (nppGlobalCommandStateScanResults.length != 0) {
      nppGlobalCommandState = nppGlobalCommandStateScanResults[0].address.add(1).readPointer();
    } else {
      nppGlobalCommandStatePattern = "e0 54 a7 00 68 c0 dc 81 00 52 bf e4 13 9d 00 e8 98 c0 e7 ff e8 73 ae e6 ff 88 44 24 0f 6a 00 68 60 62 9f 00 6a 08 6a 3b ff d6 6a 00 68 68 62 9f 00 6a 08 6a 35 ff d6 6a 00 68 70 62 9f 00 6a 18";
      nppGlobalCommandStateScanResults = Memory.scanSync(fuelModule.base, fuelModule.size, nppGlobalCommandStatePattern);
      if (nppGlobalCommandStateScanResults.length != 0) {
        nppGlobalCommandState = new NativePointer('0x00a754e0');
        isDemo = true;
      } else {
        console.log("Could not locate the nppGlobalCommandState. Aborting...");
        return;
      }
    }
    // 0x00a7c080 EN
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x80, 0xc0, 0xa7, 0x00, 0xd9, 0x05, 0x18, 0xc0, 0x9d, 0x00,
    //   0x6a, 0x00, 0xd9, 0x1d, 0x68, 0xd3, 0xa7, 0x00, 0x68, 0x78,
    //   0x81, 0x9c, 0x00, 0x50, 0xc6, 0x05, 0x70, 0xd3, 0xa7, 0x00,
    //   0x00, 0xe8, 0x3a, 0x13, 0x01, 0x00, 0x83, 0x05, 0x60, 0xd3,
    //   0xa7, 0x00, 0x01, 0x80, 0x3d, 0x79, 0x58, 0xa6, 0x00, 0x00,
    //   0x75, 0xf7, 0xe8, 0x85, 0xf9, 0xff, 0xff, 0xe8, 0xb0, 0x71,
    //   0x19, 0x00, 0x84, 0xc0
    // };

    // 0x00a7e088 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x88, 0xe0, 0xa7, 0x00, 0xd9, 0x05, 0xa8, 0xe0, 0x9d, 0x00,
    //   0x6a, 0x00, 0xd9, 0x1d, 0x70, 0xf3, 0xa7, 0x00, 0x68, 0x08,
    //   0xa2, 0x9c, 0x00, 0x50, 0xc6, 0x05, 0x78, 0xf3, 0xa7, 0x00,
    //   0x00, 0xe8, 0x3a, 0x13, 0x01, 0x00, 0x83, 0x05, 0x68, 0xf3,
    //   0xa7, 0x00, 0x01, 0x80, 0x3d, 0x79, 0x78, 0xa6, 0x00, 0x00,
    //   0x75, 0xf7, 0xe8, 0x85, 0xf9, 0xff, 0xff, 0xe8, 0xc0, 0x71,
    //   0x19, 0x00, 0x84, 0xc0
    // };

    // 0x00a754e0 Demo
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0xe0, 0x54, 0xa7, 0x00, 0x68, 0xc0, 0xdc, 0x81, 0x00, 0x52,
    //   0xbf, 0xe4, 0x13, 0x9d, 0x00, 0xe8, 0x98, 0xc0, 0xe7, 0xff,
    //   0xe8, 0x73, 0xae, 0xe6, 0xff, 0x88, 0x44, 0x24, 0x0f, 0x6a,
    //   0x00, 0x68, 0x60, 0x62, 0x9f, 0x00, 0x6a, 0x08, 0x6a, 0x3b,
    //   0xff, 0xd6, 0x6a, 0x00, 0x68, 0x68, 0x62, 0x9f, 0x00, 0x6a,
    //   0x08, 0x6a, 0x35, 0xff, 0xd6, 0x6a, 0x00, 0x68, 0x70, 0x62,
    //   0x9f, 0x00, 0x6a, 0x18
    // };

    var nfRunCommand;
    var nfRunCommandPattern = "b8 0c 80 00 00 e8 ?? ?? 21 00 8b 94 24 14 80 00 00 53 56 57 8b bc 24 1c 80 00 00 8d 44 24 18 b9 1f 00 00 00 33 db 88 18 05 00 04 00 00 83 e9 01 79 f4 8b c2 8d 70 01 8a 08 83 c0 01 84 c9 75 f7";
    var nfRunCommandScanResults = Memory.scanSync(fuelModule.base, fuelModule.size, nfRunCommandPattern);
    if (nfRunCommandScanResults.length != 0) {
      nfRunCommand = new NativeFunction(nfRunCommandScanResults[0].address, "bool", ["pointer", "pointer", "uint32"], 'stdcall');
    } else if (isDemo) {
      nfRunCommand = new NativeFunction(new NativePointer('0x0069b7a0'), "bool", ["pointer", "pointer", "uint32"], 'stdcall');
    } else {
      console.log("Could not locate the nfRunCommand. Aborting...");
      return;
    }

    Interceptor.attach(nfRunCommand, {
      onEnter: args => {
        if (logCommands) {
          this.command_line = args[1].readAnsiString();
        }
      },
      onLeave: (retval) => {
        if (logCommands && checkNotExcluded(this.command_line)) {
          console.log("\"" + this.command_line + "\" " + (retval.toInt32() & 0xFF));
        }
      }
    });

    global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) };
    // 0x0069a590 EN
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0xb8, 0x0c, 0x80, 0x00, 0x00, 0xe8, 0x56, 0xd8, 0x21, 0x00,
    //   0x8b, 0x94, 0x24, 0x14, 0x80, 0x00, 0x00, 0x53, 0x56, 0x57,
    //   0x8b, 0xbc, 0x24, 0x1c, 0x80, 0x00, 0x00, 0x8d, 0x44, 0x24,
    //   0x18, 0xb9, 0x1f, 0x00, 0x00, 0x00, 0x33, 0xdb, 0x88, 0x18,
    //   0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79, 0xf4,
    //   0x8b, 0xc2, 0x8d, 0x70, 0x01, 0x8a, 0x08, 0x83, 0xc0, 0x01,
    //   0x84, 0xc9, 0x75, 0xf7
    // };

    // 0x0069b7e0 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0xb8, 0x0c, 0x80, 0x00, 0x00, 0xe8, 0x06, 0xd9, 0x21, 0x00,
    //   0x8b, 0x94, 0x24, 0x14, 0x80, 0x00, 0x00, 0x53, 0x56, 0x57,
    //   0x8b, 0xbc, 0x24, 0x1c, 0x80, 0x00, 0x00, 0x8d, 0x44, 0x24,
    //   0x18, 0xb9, 0x1f, 0x00, 0x00, 0x00, 0x33, 0xdb, 0x88, 0x18,
    //   0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79, 0xf4,
    //   0x8b, 0xc2, 0x8d, 0x70, 0x01, 0x8a, 0x08, 0x83, 0xc0, 0x01,
    //   0x84, 0xc9, 0x75, 0xf7
    // };

    // 0x0069b7a0 Demo
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x0f, 0x22, 0xdf, 0x83, 0xa4, 0xfa, 0x82, 0x85, 0x39, 0x55,
    //   0x4e, 0xe2, 0xb7, 0x56, 0x1d, 0xd5, 0xf4, 0x64, 0x2a, 0x34,
    //   0xc6, 0x29, 0x1f, 0x05, 0x80, 0xaa, 0x09, 0x1c, 0xf8, 0x13,
    //   0x16, 0xb5, 0x9d, 0x1f, 0x36, 0xba, 0x8a, 0xc1, 0x1e, 0x6b,
    //   0x21, 0x1b, 0xe1, 0x12, 0xa2, 0x77, 0x48, 0x1c, 0x78, 0x35,
    //   0xfa, 0xf7, 0xf2, 0xd7, 0xfb, 0x42, 0x6c, 0x35, 0x14, 0xdb,
    //   0x84, 0xb9, 0x40, 0x6b
    // };

    var npRegisterCommand;
    var npRegisterCommandPattern = "83 ec 10 53 55 6a 10 e8 ?? ?? 21 00 33 db 83 c4 04 3b c3 74 0f 89 18 89 58 04 89 58 0c 89 58 08 8b e8 eb 02 33 ed 33 c0 3b fb 74 07 8b d7 e8 ?? ?? ?? ff 89 45 00 8b 44 24 20 89 45 08 8b c7 56";
    var npRegisterCommandScanResults = Memory.scanSync(fuelModule.base, fuelModule.size, npRegisterCommandPattern);
    if (npRegisterCommandScanResults.length != 0) {
      npRegisterCommand = npRegisterCommandScanResults[0].address;
    } else if (isDemo) {
      npRegisterCommand = new NativePointer('0x0069b610');
    } else {
      console.log("Could not locate the npRegisterCommand. Aborting...");
      return;
    }

    Interceptor.attach(npRegisterCommand, {
      onEnter: args => {
        commandNames.push(this.context.edi.readAnsiString());
      }
    });

    global.dumpCommandNames = () => { console.log(commandNames); };
    global.dumpCommandNamesPretty = () => { console.log(commandNames.join("\n")); };
    // 0x0069a400 EN
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x83, 0xec, 0x10, 0x53, 0x55, 0x6a, 0x10, 0xe8, 0x7a, 0xca,
    //   0x21, 0x00, 0x33, 0xdb, 0x83, 0xc4, 0x04, 0x3b, 0xc3, 0x74,
    //   0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58, 0x0c, 0x89,
    //   0x58, 0x08, 0x8b, 0xe8, 0xeb, 0x02, 0x33, 0xed, 0x33, 0xc0,
    //   0x3b, 0xfb, 0x74, 0x07, 0x8b, 0xd7, 0xe8, 0x2d, 0xed, 0xfc,
    //   0xff, 0x89, 0x45, 0x00, 0x8b, 0x44, 0x24, 0x20, 0x89, 0x45,
    //   0x08, 0x8b, 0xc7, 0x56
    // };

    // 0x0069b650 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x83, 0xec, 0x10, 0x53, 0x55, 0x6a, 0x10, 0xe8, 0x2a, 0xcb,
    //   0x21, 0x00, 0x33, 0xdb, 0x83, 0xc4, 0x04, 0x3b, 0xc3, 0x74,
    //   0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58, 0x0c, 0x89,
    //   0x58, 0x08, 0x8b, 0xe8, 0xeb, 0x02, 0x33, 0xed, 0x33, 0xc0,
    //   0x3b, 0xfb, 0x74, 0x07, 0x8b, 0xd7, 0xe8, 0x8d, 0x56, 0xfd,
    //   0xff, 0x89, 0x45, 0x00, 0x8b, 0x44, 0x24, 0x20, 0x89, 0x45,
    //   0x08, 0x8b, 0xc7, 0x56
    // };

    // 0x0069b610 Demo
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x8c, 0x78, 0x19, 0xa6, 0x78, 0x9b, 0x0d, 0x93, 0x05, 0xf8,
    //   0xe0, 0x1d, 0x98, 0xfa, 0x39, 0xee, 0x36, 0xa2, 0x44, 0x0c,
    //   0x6c, 0x82, 0x34, 0x12, 0xe1, 0x50, 0x27, 0xf3, 0xf1, 0xed,
    //   0x3c, 0xd8, 0xf6, 0x9a, 0xb1, 0x26, 0x06, 0x09, 0x2c, 0xf8,
    //   0xf0, 0x85, 0x77, 0x08, 0xbd, 0x57, 0xce, 0xf4, 0x30, 0xf7,
    //   0x0e, 0x03, 0x68, 0x98, 0x96, 0xf8, 0x8e, 0xd7, 0xe6, 0xaa,
    //   0x6a, 0xef, 0x3d, 0x64
    // };

    if (!isDemo) {
      var xliveModule = Process.findModuleByName("xlive.dll");

      if (xliveModule) {
        Memory.protect(xliveModule.base, xliveModule.size, "rwx");
        var npXLiveMemCheckPattern = "8b ff 55 8b ec 83 ec 20 53 56 57 8d 45 e0 33 f6 50 ff 75 0c 8b f9 8b 4d 08 89 75 e0 89 75 e4 89";
        var npXLiveMemCheckScanResults = Memory.scanSync(xliveModule.base, xliveModule.size, npXLiveMemCheckPattern);
        if (npXLiveMemCheckScanResults.length != 0) {
          var npXLiveMemCheck = npXLiveMemCheckScanResults[0].address;
          npXLiveMemCheck.writeByteArray([0xC2, 0x0C, 0x00]);
        } else {
          console.log("Could not locate the npXLiveMemCheck. Assuming you have liveless installed.");
        }
      } else {
        console.log("Could not locate xlive.dll. Assuming you have liveless installed.");
      }
    }

    // 0x004f36b3 xlive.dll
    // #define _BUFFER_SIZE 32
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x8b, 0xff, 0x55, 0x8b, 0xec, 0x83, 0xec, 0x20, 0x53, 0x56,
    //   0x57, 0x8d, 0x45, 0xe0, 0x33, 0xf6, 0x50, 0xff, 0x75, 0x0c,
    //   0x8b, 0xf9, 0x8b, 0x4d, 0x08, 0x89, 0x75, 0xe0, 0x89, 0x75,
    //   0xe4, 0x89
    // };
  },

  ////////////
  // WALL-E //
  ////////////

  "wall-e": () => {
    const walleModule = Process.enumerateModules()[0];

    for (const module of Process.enumerateModules()) {
      Memory.protect(module.base, module.size, "rwx");
    }
    
    // var nppGlobalCommandState;
    // var nppGlobalCommandStatePattern = "8b 0d ?? ?? ?? ?? 6a 00 68 24 f9 89 00 e8 a5 c7 d6 ff 8b 16 8b 42 48 6a 00 8b ce ff d0 80 be 6c 12 00 00 00 0f 84 81 00 00 00 8b 0d 38 e7 92 00 6a 00 68 24 f9 89 00 e8 7b c7 d6 ff c6 86 f5 13";
    // var nppGlobalCommandStateScanResults = Memory.scanSync(walleModule.base, walleModule.size, nppGlobalCommandStatePattern);
    // if (nppGlobalCommandStateScanResults.length != 0) {
    //   nppGlobalCommandState = nppGlobalCommandStateScanResults[0].address.add(2).readPointer();
    // } else {
    //   console.log("Could not locate the nppGlobalCommandState. Aborting...");
    //   return;
    // }

    var nppGlobalCommandState = walleModule.base.add(0x0092e738).sub(0x00400000);
    // 0x0092e738 Scene
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x8b, 0x0d, 0x38, 0xe7, 0x92, 0x00, 0x85, 0xc9, 0x74, 0x0c,
    //   0x6a, 0x00, 0x68, 0xd4, 0xbb, 0x7c, 0x00, 0xe8, 0xb2, 0x2a,
    //   0xd9, 0xff, 0x5b, 0xc3, 0x8b, 0x44, 0x24, 0x04, 0x50, 0xe8,
    //   0x56, 0x29, 0xff, 0xff, 0x8b, 0x0d, 0x4c, 0xe7, 0x92, 0x00,
    //   0x85, 0xc9, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x6a, 0x00,
    //   0xe8, 0x51, 0xfc, 0xfc, 0xff, 0x85, 0xc0, 0x0f, 0x84, 0xc2,
    //   0x00, 0x00, 0x00, 0x8b
    // };

    // 0x0092e738 RU.dll
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x8b, 0x0d, 0x38, 0xe7, 0x92, 0x00, 0x6a, 0x00, 0x68, 0x24,
    //   0xf9, 0x89, 0x00, 0xe8, 0xa5, 0xc7, 0xd6, 0xff, 0x8b, 0x16,
    //   0x8b, 0x42, 0x48, 0x6a, 0x00, 0x8b, 0xce, 0xff, 0xd0, 0x80,
    //   0xbe, 0x6c, 0x12, 0x00, 0x00, 0x00, 0x0f, 0x84, 0x81, 0x00,
    //   0x00, 0x00, 0x8b, 0x0d, 0x38, 0xe7, 0x92, 0x00, 0x6a, 0x00,
    //   0x68, 0x24, 0xf9, 0x89, 0x00, 0xe8, 0x7b, 0xc7, 0xd6, 0xff,
    //   0xc6, 0x86, 0xf5, 0x13
    // };

    // 0xXXXXXXX RU.exe
    // 

    // var nfRunCommand;
    // var nfRunCommandPattern = "b8 0c 40 00 00 e8 16 0d 30 00 56 8b f1 57 89 74 24 0c 8d 44 24 14 b9 0f 00 00 00 eb 03 8d 49 00 c6 00 00 05 00 04 00 00 83 e9 01 79 f3 8b bc 24 18 40 00 00 8b c7 8d 50 01 8d a4 24 00 00 00 00";
    // var nfRunCommandScanResults = Memory.scanSync(walleModule.base, walleModule.size, nfRunCommandPattern);
    // if (nfRunCommandScanResults.length != 0) {
    //   nfRunCommand = new NativeFunction(nfRunCommandScanResults[0].address, "bool", ["pointer", "pointer", "uint32"], 'thiscall');
    // } else {
    //   console.log("Could not locate the nfRunCommand. Aborting...");
    //   return;
    // }

    var nfRunCommand = new NativeFunction(walleModule.base.add(0x00476580).sub(0x00400000), "bool", ["pointer", "pointer", "uint32"], 'thiscall');

    Interceptor.attach(nfRunCommand, {
      onEnter: args => {
        if (logCommands) {
          this.command_line = args[0].readAnsiString();
        }
      },
      onLeave: (retval) => {
        if (logCommands && checkNotExcluded(this.command_line)) {
          console.log("\"" + this.command_line + "\" " + (retval.toInt32() & 0xFF));
        }
      }
    });

    global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) };
    // 0x00476580 Scene
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0xbf, 0xfe, 0xc1, 0x7f, 0x72, 0x58, 0x98, 0xf9, 0x35, 0xa0,
    //   0x14, 0x1b, 0x28, 0x1e, 0x6c, 0xf5, 0x33, 0x46, 0x10, 0x8a,
    //   0x17, 0xa1, 0x06, 0xa7, 0x90, 0x6c, 0x7f, 0x4c, 0x1d, 0xf6,
    //   0x1c, 0xe2, 0x69, 0x08, 0x2e, 0x2b, 0x90, 0xf3, 0x46, 0xe5,
    //   0xac, 0x3d, 0xe7, 0x53, 0x5a, 0x41, 0x18, 0x1a, 0x1c, 0x61,
    //   0x97, 0x98, 0x54, 0xa8, 0xcb, 0x6f, 0x00, 0x7c, 0xf0, 0xea,
    //   0x12, 0x70, 0xab, 0xe9
    // };

    // 0x00476580 RU.dll
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0xb8, 0x0c, 0x40, 0x00, 0x00, 0xe8, 0x16, 0x0d, 0x30, 0x00,
    //   0x56, 0x8b, 0xf1, 0x57, 0x89, 0x74, 0x24, 0x0c, 0x8d, 0x44,
    //   0x24, 0x14, 0xb9, 0x0f, 0x00, 0x00, 0x00, 0xeb, 0x03, 0x8d,
    //   0x49, 0x00, 0xc6, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x00,
    //   0x83, 0xe9, 0x01, 0x79, 0xf3, 0x8b, 0xbc, 0x24, 0x18, 0x40,
    //   0x00, 0x00, 0x8b, 0xc7, 0x8d, 0x50, 0x01, 0x8d, 0xa4, 0x24,
    //   0x00, 0x00, 0x00, 0x00
    // };

    // 0xXXXXXXX RU.exe
    // 

    // var npRegisterCommand;
    // var npRegisterCommandPattern = "83 ec 14 53 55 6a 10 89 4c 24 0c e8 1f 5c 30 00 33 db 83 c4 04 3b c3 74 0f 89 18 89 58 04 89 58 0c 89 58 08 8b e8 eb 02 33 ed 56 57 8b 7c 24 28 3b fb 74 0b 33 d2 8b cf e8 c3 21 fb ff eb 02 33";
    // var npRegisterCommandScanResults = Memory.scanSync(walleModule.base, walleModule.size, npRegisterCommandPattern);
    // if (npRegisterCommandScanResults.length != 0) {
    //   npRegisterCommand = npRegisterCommandScanResults[0].address;
    // } else {
    //   console.log("Could not locate the npRegisterCommand. Aborting...");
    //   return;
    // }

    var npRegisterCommand = walleModule.base.add(0x004763b0).sub(0x00400000);

    Interceptor.attach(npRegisterCommand, {
      onEnter: args => {
        commandNames.push(args[0].readAnsiString());
      }
    });

    global.dumpCommandNames = () => { console.log(commandNames); };
    global.dumpCommandNamesPretty = () => { console.log(commandNames.join("\n")); };
    // 0xXXXXXXXXX Scene
    //

    // 0x004763b0 RU.dll
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x83, 0xec, 0x14, 0x53, 0x55, 0x6a, 0x10, 0x89, 0x4c, 0x24,
    //   0x0c, 0xe8, 0x1f, 0x5c, 0x30, 0x00, 0x33, 0xdb, 0x83, 0xc4,
    //   0x04, 0x3b, 0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04,
    //   0x89, 0x58, 0x0c, 0x89, 0x58, 0x08, 0x8b, 0xe8, 0xeb, 0x02,
    //   0x33, 0xed, 0x56, 0x57, 0x8b, 0x7c, 0x24, 0x28, 0x3b, 0xfb,
    //   0x74, 0x0b, 0x33, 0xd2, 0x8b, 0xcf, 0xe8, 0xc3, 0x21, 0xfb,
    //   0xff, 0xeb, 0x02, 0x33
    // };

    // 0xXXXXXXX RU.exe
    // 
    
    var npDPadCheats;
    var npDPadCheatsPattern = "50 41 54 43 48 5f 46 4c 41 47 53 5f 70 5f 44 5f 62 5f 4c 5f 4d 5f 63";
    var npDPadCheatsScanResults = Memory.scanSync(walleModule.base, walleModule.size, npDPadCheatsPattern);
    if (npDPadCheatsScanResults.length != 0) {
      npDPadCheats = npDPadCheatsScanResults[0].address.add(22);
    } else {
      console.log("Could not locate the npDPadCheats. Aborting...");
      return;
    }

    global.enableDPadCheats = () => {
      npDPadCheats.writeU8(0x43);
    };

    global.disableDPadCheats = () => {
      npDPadCheats.writeU8(0x63);
    };
  },

  /////////
  // Rat //
  /////////

  "overlay": () => {
    const ratModule = Process.enumerateModules()[0];

    for (const module of Process.enumerateModules()) {
      Memory.protect(module.base, module.size, "rwx");
    }

    var pattern = "b8 0c 44 00 00 e8 d6 8b 0f 00 a1 60 6d 79 00 33 84 24 0c 44 00 00 53 55 89 84 24 10 44 00 00 8b e9 8d 84 24 10 04 00 00 b9 10 00 00 00 8d 49 00 c6 00 00 05 00 04 00 00 49 75 f5 8b 9c 24 18 44";
    var results = Memory.scanSync(ratModule.base, ratModule.size, pattern);
    
    if (results.length != 0 && results[0].address.equals(new NativePointer('0x0052e8b0'))) {
      // garfield
      var nppGlobalCommandState = new NativePointer('0x007b2f9c');
      // 0x007b2f9c US EU RU

      var nfRunCommand = new NativeFunction(new NativePointer('0x0052e8b0'), "bool", ["pointer", "pointer", "uint32"], 'thiscall');

      Interceptor.attach(nfRunCommand, {
        onEnter: args => {
          if (logCommands) {
            this.command_line = args[0].readAnsiString();
          }
        },
        onLeave: (retval) => {
          if (logCommands && checkNotExcluded(this.command_line)) {
            console.log("\"" + this.command_line + "\" " + (retval.toInt32() & 0xFF));
          }
        }
      });

      global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) };
      // 0x0052e8b0 US EU RU
      // #define _BUFFER_SIZE 64
      // const uint8_t buffer[_BUFFER_SIZE] = {
      //   0xb8, 0x0c, 0x44, 0x00, 0x00, 0xe8, 0xd6, 0x8b, 0x0f, 0x00,
      //   0xa1, 0x60, 0x6d, 0x79, 0x00, 0x33, 0x84, 0x24, 0x0c, 0x44,
      //   0x00, 0x00, 0x53, 0x55, 0x89, 0x84, 0x24, 0x10, 0x44, 0x00,
      //   0x00, 0x8b, 0xe9, 0x8d, 0x84, 0x24, 0x10, 0x04, 0x00, 0x00,
      //   0xb9, 0x10, 0x00, 0x00, 0x00, 0x8d, 0x49, 0x00, 0xc6, 0x00,
      //   0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x49, 0x75, 0xf5, 0x8b,
      //   0x9c, 0x24, 0x18, 0x44
      // };

      var npRegisterCommand = new NativePointer('0x0052e520');

      Interceptor.attach(npRegisterCommand, {
        onEnter: args => {
          commandNames.push(args[0].readAnsiString());
        }
      });

      global.dumpCommandNames = () => { console.log(commandNames); };
      global.dumpCommandNamesPretty = () => { console.log(commandNames.join("\n")); };
      // 0x0052e520 US EU RU
      // #define _BUFFER_SIZE 64
      // const uint8_t buffer[_BUFFER_SIZE] = {
      //   0x83, 0xec, 0x18, 0xa1, 0x60, 0x6d, 0x79, 0x00, 0x33, 0x44,
      //   0x24, 0x18, 0x53, 0x57, 0x6a, 0x1a, 0x68, 0x1c, 0xea, 0x6f,
      //   0x00, 0x68, 0x60, 0x45, 0x6f, 0x00, 0x6a, 0x10, 0x89, 0x44,
      //   0x24, 0x2c, 0x89, 0x4c, 0x24, 0x18, 0xe8, 0xa7, 0x8f, 0xfc,
      //   0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b, 0xc3, 0x74, 0x0f,
      //   0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58, 0x0c, 0x89, 0x58,
      //   0x08, 0x8b, 0xf8, 0xeb
      // };

      // random menu thing

      var npModernPopupMenuCondition = new NativePointer('0x005EBAED').add(1);

      global.enableContextMenu = () => {
        npModernPopupMenuCondition.writeU8(0x00);
      };

      global.disableContextMenu = () => {
        npModernPopupMenuCondition.writeU8(0x56);
      };

      // 0x005EBAED US EU RU
      // #define _BUFFER_SIZE 64
      // const uint8_t buffer[_BUFFER_SIZE] = {
      //   0x75, 0x56, 0xa1, 0xe0, 0x2f, 0x7b, 0x00, 0x8a, 0x48, 0x1d,
      //   0x84, 0xc9, 0x74, 0x4a, 0x53, 0x56, 0xff, 0x15, 0x10, 0x0b,
      //   0x8f, 0x00, 0x8b, 0x0d, 0x68, 0x35, 0x7b, 0x00, 0x8b, 0x19,
      //   0x8d, 0x54, 0x24, 0x0c, 0x52, 0x8b, 0xf0, 0xff, 0x15, 0x7c,
      //   0x0b, 0x8f, 0x00, 0x8b, 0x47, 0x08, 0x50, 0x56, 0x8b, 0xcf,
      //   0xe8, 0xcc, 0xfe, 0xff, 0xff, 0x8b, 0x4c, 0x24, 0x10, 0x8b,
      //   0x54, 0x24, 0x0c, 0x6a
      // };
    } else {
      // ct
      pattern = "8b 44 24 08 8b 54 24 04 8b 89 0c 29 00 00 50 52 e8 ab d6 09 00 c2 08 00 90 90 90 90 90 90 90 90 8b 44 24 08 8b 54 24 04 8b 89 0c 29 00 00 50 52 e8 2b d8 09 00 c2 08 00 90 90 90 90 90 90 90 90";
      results = Memory.scanSync(ratModule.base, ratModule.size, pattern);
      
      if (results.length != 0 && results[0].address.equals(new NativePointer('0x0054B420'))) {
        var nppGlobalCommandState = new NativePointer('0x00724414');
        // 0x00724414
  
        var nfRunCommand = new NativeFunction(new NativePointer('0x0054B420'), "bool", ["pointer", "pointer", "uint32"], 'thiscall');

        Interceptor.attach(nfRunCommand, {
          onEnter: args => {
            if (logCommands) {
              this.command_line = args[0].readAnsiString();
            }
          },
          onLeave: (retval) => {
            if (logCommands && checkNotExcluded(this.command_line)) {
              console.log("\"" + this.command_line + "\" " + (retval.toInt32() & 0xFF));
            }
          }
        });
  
        global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) };
        // 0x0054B420
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x8b, 0x44, 0x24, 0x08, 0x8b, 0x54, 0x24, 0x04, 0x8b, 0x89,
        //   0x0c, 0x29, 0x00, 0x00, 0x50, 0x52, 0xe8, 0xab, 0xd6, 0x09,
        //   0x00, 0xc2, 0x08, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
        //   0x90, 0x90, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x54, 0x24, 0x04,
        //   0x8b, 0x89, 0x0c, 0x29, 0x00, 0x00, 0x50, 0x52, 0xe8, 0x2b,
        //   0xd8, 0x09, 0x00, 0xc2, 0x08, 0x00, 0x90, 0x90, 0x90, 0x90,
        //   0x90, 0x90, 0x90, 0x90
        // };
  
        var npRegisterCommand = new NativePointer('0x0054B1C0');
  
        Interceptor.attach(npRegisterCommand, {
          onEnter: args => {
            commandNames.push(args[0].readAnsiString());
          }
        });
  
        global.dumpCommandNames = () => { console.log(commandNames); };
        global.dumpCommandNamesPretty = () => { console.log(commandNames.join("\n")); };
        // 0x0054B1C0
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x83, 0xec, 0x14, 0x55, 0x56, 0x6a, 0x1a, 0x68, 0x14, 0x27,
        //   0x70, 0x00, 0x68, 0x64, 0xaf, 0x6f, 0x00, 0x89, 0x4c, 0x24,
        //   0x14, 0x6a, 0x10, 0xe8, 0xc4, 0x13, 0xff, 0xff, 0x33, 0xf6,
        //   0x83, 0xc4, 0x10, 0x3b, 0xc6, 0x74, 0x0f, 0x89, 0x30, 0x89,
        //   0x70, 0x04, 0x89, 0x70, 0x0c, 0x89, 0x70, 0x08, 0x8b, 0xe8,
        //   0xeb, 0x02, 0x33, 0xed, 0x53, 0x8b, 0x5c, 0x24, 0x24, 0x3b,
        //   0xde, 0x74, 0x0c, 0x56
        // };

      // random menu thing

      var npModernPopupMenuCondition = new NativePointer('0x0060AE7D').add(1);

      global.enableContextMenu = () => {
        npModernPopupMenuCondition.writeU8(0x00);
      };

      global.disableContextMenu = () => {
        npModernPopupMenuCondition.writeU8(0x56);
      };

      // 0x0060AE7D
      // #define _BUFFER_SIZE 64
      // const uint8_t buffer[_BUFFER_SIZE] = {
      //   0x75, 0x56, 0xa1, 0x50, 0x44, 0x72, 0x00, 0x8a, 0x48, 0x1d,
      //   0x84, 0xc9, 0x74, 0x4a, 0x53, 0x56, 0xff, 0x15, 0x3c, 0xc2,
      //   0x67, 0x00, 0x8b, 0x0d, 0xbc, 0x46, 0x72, 0x00, 0x8d, 0x54,
      //   0x24, 0x0c, 0x52, 0x8b, 0xf0, 0x8b, 0x19, 0xff, 0x15, 0x24,
      //   0xc2, 0x67, 0x00, 0x8b, 0x47, 0x08, 0x8b, 0xcf, 0x50, 0x56,
      //   0xe8, 0xdc, 0xfe, 0xff, 0xff, 0x8b, 0x4c, 0x24, 0x10, 0x8b,
      //   0x54, 0x24, 0x0c, 0x6a
      // };
      } else {
        pattern = "4d 55 4d 4d 59 00 00 00 42 4c 4f 43 4b 33 00 00 42 4c 4f 43 4b 32 00 00 42 4c 4f 43 4b 31 00 00 42 4c 4f 43 4b 30 00 00 54 68 65 20 4d 75 6d 6d 79 00 00 00 35 32 38 33 35 00 00 00";
        results = Memory.scanSync(ratModule.base, ratModule.size, pattern);
        // Aggregate
        // 0x006A3EB8 PL
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x4d, 0x55, 0x4d, 0x4d, 0x59, 0x00, 0x00, 0x00, 0x42, 0x4c,
        //   0x4f, 0x43, 0x4b, 0x33, 0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43,
        //   0x4b, 0x32, 0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x31,
        //   0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x30, 0x00, 0x00,
        //   0x54, 0x68, 0x65, 0x20, 0x4d, 0x75, 0x6d, 0x6d, 0x79, 0x00,
        //   0x00, 0x00, 0x35, 0x32, 0x38, 0x33, 0x35, 0x00, 0x00, 0x00,
        //   ??, 0x3a, 0x5c, ??
        // };

        // 0x006A3EB8 PL
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x4d, 0x55, 0x4d, 0x4d, 0x59, 0x00, 0x00, 0x00, 0x42, 0x4c,
        //   0x4f, 0x43, 0x4b, 0x33, 0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43,
        //   0x4b, 0x32, 0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x31,
        //   0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x30, 0x00, 0x00,
        //   0x54, 0x68, 0x65, 0x20, 0x4d, 0x75, 0x6d, 0x6d, 0x79, 0x00,
        //   0x00, 0x00, 0x35, 0x32, 0x38, 0x33, 0x35, 0x00, 0x00, 0x00,
        //   0x44, 0x3a, 0x5c, 0x4d
        // };

        // 0x006A3F20 RU
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x4d, 0x55, 0x4d, 0x4d, 0x59, 0x00, 0x00, 0x00, 0x42, 0x4c,
        //   0x4f, 0x43, 0x4b, 0x33, 0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43,
        //   0x4b, 0x32, 0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x31,
        //   0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x30, 0x00, 0x00,
        //   0x54, 0x68, 0x65, 0x20, 0x4d, 0x75, 0x6d, 0x6d, 0x79, 0x00,
        //   0x00, 0x00, 0x35, 0x32, 0x38, 0x33, 0x35, 0x00, 0x00, 0x00,
        //   0x43, 0x3a, 0x5c, 0x54
        // };

        if (results.length != 0) {
          // mummy
          
          var nppGlobalCommandState;
          var nppGlobalCommandStatePattern = "8b 0d ?? ?? 6b 00 68 ?? ?? 6a 00 e8 ?? 0d fe ff ff 05 ?? ?? 6b 00 a0 ?? ?? 6c 00 84 c0 75 f7 8b 0d ?? ?? 6b 00 8d 41 18 8b 0d ?? ?? 6b 00 50 e8 ?? 00 fd ff 85 c0 74 1c 8b 0d ?? ?? 6b 00 83 c0";
          var nppGlobalCommandStateScanResults = Memory.scanSync(ratModule.base, ratModule.size, nppGlobalCommandStatePattern);
          if (nppGlobalCommandStateScanResults.length != 0) {
            nppGlobalCommandState = nppGlobalCommandStateScanResults[0].address.add(2).readPointer();
          } else {
            console.log("Could not locate the nppGlobalCommandState. Aborting...");
            return;
          }
          // Aggregate
          // #define _BUFFER_SIZE 64
          // const uint8_t buffer[_BUFFER_SIZE] = {
          //   0x8b, 0x0d, ??, ??, 0x6b, 0x00, 0x68, ??, ??, 0x6a,
          //   0x00, 0xe8, ??, 0x0d, 0xfe, 0xff, 0xff, 0x05, ??, ??,
          //   0x6b, 0x00, 0xa0, ??, ??, 0x6c, 0x00, 0x84, 0xc0, 0x75,
          //   0xf7, 0x8b, 0x0d, ??, ??, 0x6b, 0x00, 0x8d, 0x41, 0x18,
          //   0x8b, 0x0d, ??, ??, 0x6b, 0x00, 0x50, 0xe8, ??, 0x00,
          //   0xfd, 0xff, 0x85, 0xc0, 0x74, 0x1c, 0x8b, 0x0d, ??, ??,
          //   0x6b, 0x00, 0x83, 0xc0
          // };

          // 0x006BDC2C PL
          // #define _BUFFER_SIZE 64
          // const uint8_t buffer[_BUFFER_SIZE] = {
          //   0x8b, 0x0d, 0x2c, 0xdc, 0x6b, 0x00, 0x68, 0xfc, 0x5b, 0x6a,
          //   0x00, 0xe8, 0x5e, 0x0d, 0xfe, 0xff, 0xff, 0x05, 0xac, 0xde,
          //   0x6b, 0x00, 0xa0, 0x40, 0xe6, 0x6c, 0x00, 0x84, 0xc0, 0x75,
          //   0xf7, 0x8b, 0x0d, 0x40, 0xdc, 0x6b, 0x00, 0x8d, 0x41, 0x18,
          //   0x8b, 0x0d, 0x34, 0xdc, 0x6b, 0x00, 0x50, 0xe8, 0x4a, 0x00,
          //   0xfd, 0xff, 0x85, 0xc0, 0x74, 0x1c, 0x8b, 0x0d, 0x34, 0xdc,
          //   0x6b, 0x00, 0x83, 0xc0
          // };

          // 0x006BDE6C RU
          // #define _BUFFER_SIZE 64
          // const uint8_t buffer[_BUFFER_SIZE] = {
          //   0x8b, 0x0d, 0x6c, 0xde, 0x6b, 0x00, 0x68, 0xbc, 0x5c, 0x6a,
          //   0x00, 0xe8, 0x6e, 0x0d, 0xfe, 0xff, 0xff, 0x05, 0xec, 0xe0,
          //   0x6b, 0x00, 0xa0, 0x80, 0xe8, 0x6c, 0x00, 0x84, 0xc0, 0x75,
          //   0xf7, 0x8b, 0x0d, 0x80, 0xde, 0x6b, 0x00, 0x8d, 0x41, 0x18,
          //   0x8b, 0x0d, 0x74, 0xde, 0x6b, 0x00, 0x50, 0xe8, 0x0a, 0x00,
          //   0xfd, 0xff, 0x85, 0xc0, 0x74, 0x1c, 0x8b, 0x0d, 0x74, 0xde,
          //   0x6b, 0x00, 0x83, 0xc0
          // };
          

          var nfRunCommand;
          var nfRunCommandPattern = "8b 44 24 08 8b 54 24 04 8b 89 10 29 00 00 50 52 e8 ?? ?? 08 00 c2 08 00 90 90 90 90 90 90 90 90 8b 44 24 04 8b 89 10 29 00 00 50 e8 ?? ?? 08 00 c2 04 00 90 90 90 90 90 90 90 90 90 90 90 90 90";
          var nfRunCommandScanResults = Memory.scanSync(ratModule.base, ratModule.size, nfRunCommandPattern);
          if (nfRunCommandScanResults.length != 0) {
            nfRunCommand = new NativeFunction(nfRunCommandScanResults[0].address, "bool", ["pointer", "pointer", "uint32"], 'thiscall');
          } else {
            console.log("Could not locate the nfRunCommand. Aborting...");
            return;
          }

          Interceptor.attach(nfRunCommand, {
            onEnter: args => {
              if (logCommands) {
                this.command_line = args[0].readAnsiString();
              }
            },
            onLeave: (retval) => {
              if (logCommands && checkNotExcluded(this.command_line)) {
                console.log("\"" + this.command_line + "\" " + (retval.toInt32() & 0xFF));
              }
            }
          });

          global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) };
          // Aggregate
          // #define _BUFFER_SIZE 64
          // const uint8_t buffer[_BUFFER_SIZE] = {
          //   0x8b, 0x44, 0x24, 0x08, 0x8b, 0x54, 0x24, 0x04, 0x8b, 0x89,
          //   0x10, 0x29, 0x00, 0x00, 0x50, 0x52, 0xe8, ??, ??, 0x08,
          //   0x00, 0xc2, 0x08, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
          //   0x90, 0x90, 0x8b, 0x44, 0x24, 0x04, 0x8b, 0x89, 0x10, 0x29,
          //   0x00, 0x00, 0x50, 0xe8, ??, ??, 0x08, 0x00, 0xc2, 0x04,
          //   0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
          //   0x90, 0x90, 0x90, 0x90
          // };

          // 0x004FF340 PL
          // #define _BUFFER_SIZE 64
          // const uint8_t buffer[_BUFFER_SIZE] = {
          //   0x8b, 0x44, 0x24, 0x08, 0x8b, 0x54, 0x24, 0x04, 0x8b, 0x89,
          //   0x10, 0x29, 0x00, 0x00, 0x50, 0x52, 0xe8, 0x5b, 0x7b, 0x08,
          //   0x00, 0xc2, 0x08, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
          //   0x90, 0x90, 0x8b, 0x44, 0x24, 0x04, 0x8b, 0x89, 0x10, 0x29,
          //   0x00, 0x00, 0x50, 0xe8, 0xc0, 0x7c, 0x08, 0x00, 0xc2, 0x04,
          //   0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
          //   0x90, 0x90, 0x90, 0x90
          // };

          // 0x004FEE40 RU
          // #define _BUFFER_SIZE 64
          // const uint8_t buffer[_BUFFER_SIZE] = {
          //   0x8b, 0x44, 0x24, 0x08, 0x8b, 0x54, 0x24, 0x04, 0x8b, 0x89,
          //   0x10, 0x29, 0x00, 0x00, 0x50, 0x52, 0xe8, 0x7b, 0x76, 0x08,
          //   0x00, 0xc2, 0x08, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
          //   0x90, 0x90, 0x8b, 0x44, 0x24, 0x04, 0x8b, 0x89, 0x10, 0x29,
          //   0x00, 0x00, 0x50, 0xe8, 0xe0, 0x77, 0x08, 0x00, 0xc2, 0x04,
          //   0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
          //   0x90, 0x90, 0x90, 0x90
          // };

          var npRegisterCommand;
          var npRegisterCommandPattern = "83 ec 14 55 56 57 6a 1b 68 ?? ?? 6a 00 68 58 e0 69 00 89 4c 24 18 6a 10 e8 ?? ee fe ff 33 f6 83 c4 10 3b c6 74 0f 89 30 89 70 04 89 70 0c 89 70 08 8b e8 eb 02 33 ed 53 8b 5c 24 28 53 e8 5e 7d";
          var npRegisterCommandScanResults = Memory.scanSync(ratModule.base, ratModule.size, npRegisterCommandPattern);
          if (npRegisterCommandScanResults.length != 0) {
            npRegisterCommand = npRegisterCommandScanResults[0].address;
          } else {
            console.log("Could not locate the npRegisterCommand. Aborting...");
            return;
          }

          Interceptor.attach(npRegisterCommand, {
            onEnter: args => {
              commandNames.push(args[0].readAnsiString());
            }
          });
          global.dumpCommandNames = () => { console.log(commandNames); };
          global.dumpCommandNamesPretty = () => { console.log(commandNames.join("\n")); };
          // Aggregate
          // #define _BUFFER_SIZE 64
          // const uint8_t buffer[_BUFFER_SIZE] = {
          //   0x83, 0xec, 0x14, 0x55, 0x56, 0x57, 0x6a, 0x1b, 0x68, ??,
          //   ??, 0x6a, 0x00, 0x68, 0x58, 0xe0, 0x69, 0x00, 0x89, 0x4c,
          //   0x24, 0x18, 0x6a, 0x10, 0xe8, ??, 0xee, 0xfe, 0xff, 0x33,
          //   0xf6, 0x83, 0xc4, 0x10, 0x3b, 0xc6, 0x74, 0x0f, 0x89, 0x30,
          //   0x89, 0x70, 0x04, 0x89, 0x70, 0x0c, 0x89, 0x70, 0x08, 0x8b,
          //   0xe8, 0xeb, 0x02, 0x33, 0xed, 0x53, 0x8b, 0x5c, 0x24, 0x28,
          //   0x53, 0xe8, 0x5e, 0x7d
          // };

          // 0x004FF0F0 PL
          // #define _BUFFER_SIZE 64
          // const uint8_t buffer[_BUFFER_SIZE] = {
          //   0x83, 0xec, 0x14, 0x55, 0x56, 0x57, 0x6a, 0x1b, 0x68, 0xc8,
          //   0x50, 0x6a, 0x00, 0x68, 0x58, 0xe0, 0x69, 0x00, 0x89, 0x4c,
          //   0x24, 0x18, 0x6a, 0x10, 0xe8, 0x53, 0xee, 0xfe, 0xff, 0x33,
          //   0xf6, 0x83, 0xc4, 0x10, 0x3b, 0xc6, 0x74, 0x0f, 0x89, 0x30,
          //   0x89, 0x70, 0x04, 0x89, 0x70, 0x0c, 0x89, 0x70, 0x08, 0x8b,
          //   0xe8, 0xeb, 0x02, 0x33, 0xed, 0x53, 0x8b, 0x5c, 0x24, 0x28,
          //   0x53, 0xe8, 0x5e, 0x7d
          // };

          // 0x004FEBF0 RU
          // #define _BUFFER_SIZE 64
          // const uint8_t buffer[_BUFFER_SIZE] = {
          //   0x83, 0xec, 0x14, 0x55, 0x56, 0x57, 0x6a, 0x1b, 0x68, 0x68,
          //   0x51, 0x6a, 0x00, 0x68, 0x58, 0xe0, 0x69, 0x00, 0x89, 0x4c,
          //   0x24, 0x18, 0x6a, 0x10, 0xe8, 0x03, 0xee, 0xfe, 0xff, 0x33,
          //   0xf6, 0x83, 0xc4, 0x10, 0x3b, 0xc6, 0x74, 0x0f, 0x89, 0x30,
          //   0x89, 0x70, 0x04, 0x89, 0x70, 0x0c, 0x89, 0x70, 0x08, 0x8b,
          //   0xe8, 0xeb, 0x02, 0x33, 0xed, 0x53, 0x8b, 0x5c, 0x24, 0x28,
          //   0x53, 0xe8, 0x5e, 0x7d
          // };

            // random menu thing
 
            var npModernPopupMenuCondition;
            var npModernPopupMenuConditionPattern = "f6 05 ?? ?? 6b 00 01 0f 84 6c ff ff ff 53 ff 15 38 82 61 00 5f 5e 5d b8 01 00 00 00 5b c2 10 00 8d 86 ee fe ff ff 3d f8 00 00 00 0f 87 48 ff ff ff 33 c9 8a 88 ?? ?? 4e 00 ff 24 8d ?? ?? 4e 00";
            var npModernPopupMenuConditionScanResults = Memory.scanSync(ratModule.base, ratModule.size, npModernPopupMenuConditionPattern);
            if (npModernPopupMenuConditionScanResults.length != 0) {
              npModernPopupMenuCondition = npModernPopupMenuConditionScanResults[0].address.add(2);
            } else {
              console.log("Could not locate the npModernPopupMenuCondition. Aborting...");
              return;
            }

            global.enableContextMenu = () => {
              var addr = npModernPopupMenuCondition.readPointer();
              var flags = addr.readU32();
              addr.writeU32((flags | 0x4) & (~0x1));
            };

            global.disableContextMenu = () => {
              var addr = npModernPopupMenuCondition.readPointer();
              var flags = addr.readU32();
              addr.writeU32((flags & (~0x4)) | 0x1);
            };

            // Amalgamated
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0xf6, 0x05, ??, ??, 0x6b, 0x00, 0x01, 0x0f, 0x84, 0x6c,
            //   0xff, 0xff, 0xff, 0x53, 0xff, 0x15, 0x38, 0x82, 0x61, 0x00,
            //   0x5f, 0x5e, 0x5d, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x5b, 0xc2,
            //   0x10, 0x00, 0x8d, 0x86, 0xee, 0xfe, 0xff, 0xff, 0x3d, 0xf8,
            //   0x00, 0x00, 0x00, 0x0f, 0x87, 0x48, 0xff, 0xff, 0xff, 0x33,
            //   0xc9, 0x8a, 0x88, ??, ??, 0x4e, 0x00, 0xff, 0x24, 0x8d,
            //   ??, ??, 0x4e, 0x00
            // };

            // 0x004EF1CE PL
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0xf6, 0x05, 0xa0, 0xde, 0x6b, 0x00, 0x01, 0x0f, 0x84, 0x6c,
            //   0xff, 0xff, 0xff, 0x53, 0xff, 0x15, 0x38, 0x82, 0x61, 0x00,
            //   0x5f, 0x5e, 0x5d, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x5b, 0xc2,
            //   0x10, 0x00, 0x8d, 0x86, 0xee, 0xfe, 0xff, 0xff, 0x3d, 0xf8,
            //   0x00, 0x00, 0x00, 0x0f, 0x87, 0x48, 0xff, 0xff, 0xff, 0x33,
            //   0xc9, 0x8a, 0x88, 0x58, 0xf2, 0x4e, 0x00, 0xff, 0x24, 0x8d,
            //   0x4c, 0xf2, 0x4e, 0x00
            // };
            
            // 0x004EEC7E RU
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0xf6, 0x05, 0xe0, 0xe0, 0x6b, 0x00, 0x01, 0x0f, 0x84, 0x6c,
            //   0xff, 0xff, 0xff, 0x53, 0xff, 0x15, 0x38, 0x82, 0x61, 0x00,
            //   0x5f, 0x5e, 0x5d, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x5b, 0xc2,
            //   0x10, 0x00, 0x8d, 0x86, 0xee, 0xfe, 0xff, 0xff, 0x3d, 0xf8,
            //   0x00, 0x00, 0x00, 0x0f, 0x87, 0x48, 0xff, 0xff, 0xff, 0x33,
            //   0xc9, 0x8a, 0x88, 0x08, 0xed, 0x4e, 0x00, 0xff, 0x24, 0x8d,
            //   0xfc, 0xec, 0x4e, 0x00
            // };

        } else {
          pattern = "44 55 43 4b 00 00 00 00 42 4c 4f 43 4b 33 00 00 42 4c 4f 43 4b 32 00 00 42 4c 4f 43 4b 31 00 00 42 4c 4f 43 4b 30 00 00 53 69 74 74 69 6e 67 44 75 63 6b 73 00 00 00 00 35 32 31 31 36 00 00 00";
          results = Memory.scanSync(ratModule.base, ratModule.size, pattern);
          // Aggregate
          // #define _BUFFER_SIZE 64
          // const uint8_t buffer[_BUFFER_SIZE] = {
          //   0x44, 0x55, 0x43, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x42, 0x4c,
          //   0x4f, 0x43, 0x4b, 0x33, 0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43,
          //   0x4b, 0x32, 0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x31,
          //   0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x30, 0x00, 0x00,
          //   0x53, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x63,
          //   0x6b, 0x73, 0x00, 0x00, 0x00, 0x00, 0x35, 0x32, 0x31, 0x31,
          //   0x36, 0x00, 0x00, 0x00
          // };
  
          // 0x005b0420 EU
          // #define _BUFFER_SIZE 64
          // const uint8_t buffer[_BUFFER_SIZE] = {
          //   0x44, 0x55, 0x43, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x42, 0x4c,
          //   0x4f, 0x43, 0x4b, 0x33, 0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43,
          //   0x4b, 0x32, 0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x31,
          //   0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x30, 0x00, 0x00,
          //   0x53, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x63,
          //   0x6b, 0x73, 0x00, 0x00, 0x00, 0x00, 0x35, 0x32, 0x31, 0x31,
          //   0x36, 0x00, 0x00, 0x00
          // };
  
          // 0x005b1448 PL
          // #define _BUFFER_SIZE 64
          // const uint8_t buffer[_BUFFER_SIZE] = {
          //   0x44, 0x55, 0x43, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x42, 0x4c,
          //   0x4f, 0x43, 0x4b, 0x33, 0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43,
          //   0x4b, 0x32, 0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x31,
          //   0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x30, 0x00, 0x00,
          //   0x53, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x63,
          //   0x6b, 0x73, 0x00, 0x00, 0x00, 0x00, 0x35, 0x32, 0x31, 0x31,
          //   0x36, 0x00, 0x00, 0x00
          // };
  
          // 0x005b1448 RU
          // #define _BUFFER_SIZE 64
          // const uint8_t buffer[_BUFFER_SIZE] = {
          //   0x44, 0x55, 0x43, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x42, 0x4c,
          //   0x4f, 0x43, 0x4b, 0x33, 0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43,
          //   0x4b, 0x32, 0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x31,
          //   0x00, 0x00, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x30, 0x00, 0x00,
          //   0x53, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x63,
          //   0x6b, 0x73, 0x00, 0x00, 0x00, 0x00, 0x35, 0x32, 0x31, 0x31,
          //   0x36, 0x00, 0x00, 0x00
          // };
  
          if (results.length != 0) {
            // sitting ducks
            
            var nppGlobalCommandState;
            var nppGlobalCommandStatePattern = "8b 0d ?? ?? 5d 00 68 ?? ?? 5b 00 e8 ?? ?? fe ff ff 05 ?? ?? 5d 00 a0 ?? ?? 5d 00 84 c0 75 f7 8b 0d ?? ?? 5d 00 8d 41 14 8b 0d ?? ?? 5d 00 50 e8 ?? ?? fd ff 85 c0 74 1c 8b 0d ?? ?? 5d 00 83 c0";
            var nppGlobalCommandStateScanResults = Memory.scanSync(ratModule.base, ratModule.size, nppGlobalCommandStatePattern);
            if (nppGlobalCommandStateScanResults.length != 0) {
              nppGlobalCommandState = nppGlobalCommandStateScanResults[0].address.add(2).readPointer();
            } else {
              console.log("Could not locate the nppGlobalCommandState. Aborting...");
              return;
            }
            // Aggregate
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x8b, 0x0d, ??, ??, 0x5d, 0x00, 0x68, ??, ??, 0x5b,
            //   0x00, 0xe8, ??, ??, 0xfe, 0xff, 0xff, 0x05, ??, ??,
            //   0x5d, 0x00, 0xa0, ??, ??, 0x5d, 0x00, 0x84, 0xc0, 0x75,
            //   0xf7, 0x8b, 0x0d, ??, ??, 0x5d, 0x00, 0x8d, 0x41, 0x14,
            //   0x8b, 0x0d, ??, ??, 0x5d, 0x00, 0x50, 0xe8, ??, ??,
            //   0xfd, 0xff, 0x85, 0xc0, 0x74, 0x1c, 0x8b, 0x0d, ??, ??,
            //   0x5d, 0x00, 0x83, 0xc0
            // };
  
            // 0x005d5a2c EU
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x8b, 0x0d, 0x2c, 0x5a, 0x5d, 0x00, 0x68, 0x18, 0x36, 0x5b,
            //   0x00, 0xe8, 0xce, 0x94, 0xfe, 0xff, 0xff, 0x05, 0xa0, 0x5c,
            //   0x5d, 0x00, 0xa0, 0x58, 0x5f, 0x5d, 0x00, 0x84, 0xc0, 0x75,
            //   0xf7, 0x8b, 0x0d, 0x40, 0x5a, 0x5d, 0x00, 0x8d, 0x41, 0x14,
            //   0x8b, 0x0d, 0x34, 0x5a, 0x5d, 0x00, 0x50, 0xe8, 0x5a, 0xf4,
            //   0xfd, 0xff, 0x85, 0xc0, 0x74, 0x1c, 0x8b, 0x0d, 0x34, 0x5a,
            //   0x5d, 0x00, 0x83, 0xc0
            // };
  
            // 0x005d6a6c PL
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x8b, 0x0d, 0x6c, 0x6a, 0x5d, 0x00, 0x68, 0x38, 0x46, 0x5b,
            //   0x00, 0xe8, 0xfe, 0x96, 0xfe, 0xff, 0xff, 0x05, 0xe0, 0x6c,
            //   0x5d, 0x00, 0xa0, 0x98, 0x6f, 0x5d, 0x00, 0x84, 0xc0, 0x75,
            //   0xf7, 0x8b, 0x0d, 0x80, 0x6a, 0x5d, 0x00, 0x8d, 0x41, 0x14,
            //   0x8b, 0x0d, 0x74, 0x6a, 0x5d, 0x00, 0x50, 0xe8, 0x8a, 0xf6,
            //   0xfd, 0xff, 0x85, 0xc0, 0x74, 0x1c, 0x8b, 0x0d, 0x74, 0x6a,
            //   0x5d, 0x00, 0x83, 0xc0
            // };
  
            // 0x005d6a6c RU
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x8b, 0x0d, 0x6c, 0x6a, 0x5d, 0x00, 0x68, 0x3c, 0x46, 0x5b,
            //   0x00, 0xe8, 0xfe, 0x96, 0xfe, 0xff, 0xff, 0x05, 0xe0, 0x6c,
            //   0x5d, 0x00, 0xa0, 0x98, 0x6f, 0x5d, 0x00, 0x84, 0xc0, 0x75,
            //   0xf7, 0x8b, 0x0d, 0x80, 0x6a, 0x5d, 0x00, 0x8d, 0x41, 0x14,
            //   0x8b, 0x0d, 0x74, 0x6a, 0x5d, 0x00, 0x50, 0xe8, 0x8a, 0xf6,
            //   0xfd, 0xff, 0x85, 0xc0, 0x74, 0x1c, 0x8b, 0x0d, 0x74, 0x6a,
            //   0x5d, 0x00, 0x83, 0xc0
            // };
  
            var nfRunCommand;
            var nfRunCommandPattern = "8b 44 24 08 8b 54 24 04 8b 89 10 ?? 00 00 50 52 e8 bb ?? 07 00 c2 08 00 90 90 90 90 90 90 90 90 8b 81 10 ?? 00 00 8b 40 20 c3 90 90 90 90 90 90 b8 cc ?? 00 00 e8 ?? ?? 0d 00 53 55 56 8b b4 24";
            var nfRunCommandScanResults = Memory.scanSync(ratModule.base, ratModule.size, nfRunCommandPattern);
            if (nfRunCommandScanResults.length != 0) {
              nfRunCommand = new NativeFunction(nfRunCommandScanResults[0].address, "bool", ["pointer", "pointer", "uint32"], 'thiscall');
            } else {
              console.log("Could not locate the nfRunCommand. Aborting...");
              return;
            }

            Interceptor.attach(nfRunCommand, {
              onEnter: args => {
                if (logCommands) {
                  this.command_line = args[0].readAnsiString();
                }
              },
              onLeave: (retval) => {
                if (logCommands && checkNotExcluded(this.command_line)) {
                  console.log("\"" + this.command_line + "\" " + (retval.toInt32() & 0xFF));
                }
              }
            });
            
            global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) };
            // Aggregate
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x8b, 0x44, 0x24, 0x08, 0x8b, 0x54, 0x24, 0x04, 0x8b, 0x89,
            //   0x10, ??, 0x00, 0x00, 0x50, 0x52, 0xe8, 0xbb, ??, 0x07,
            //   0x00, 0xc2, 0x08, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            //   0x90, 0x90, 0x8b, 0x81, 0x10, ??, 0x00, 0x00, 0x8b, 0x40,
            //   0x20, 0xc3, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xb8, 0xcc,
            //   ??, 0x00, 0x00, 0xe8, ??, ??, 0x0d, 0x00, 0x53, 0x55,
            //   0x56, 0x8b, 0xb4, 0x24
            // };
  
            // 0x004b2170 EU
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x8b, 0x44, 0x24, 0x08, 0x8b, 0x54, 0x24, 0x04, 0x8b, 0x89,
            //   0x10, 0x19, 0x00, 0x00, 0x50, 0x52, 0xe8, 0xbb, 0x4a, 0x07,
            //   0x00, 0xc2, 0x08, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            //   0x90, 0x90, 0x8b, 0x81, 0x10, 0x19, 0x00, 0x00, 0x8b, 0x40,
            //   0x20, 0xc3, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xb8, 0xcc,
            //   0x12, 0x00, 0x00, 0xe8, 0x16, 0x05, 0x0d, 0x00, 0x53, 0x55,
            //   0x56, 0x8b, 0xb4, 0x24
            // };
  
            // 0x004b2190 PL
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x8b, 0x44, 0x24, 0x08, 0x8b, 0x54, 0x24, 0x04, 0x8b, 0x89,
            //   0x10, 0x29, 0x00, 0x00, 0x50, 0x52, 0xe8, 0xbb, 0x54, 0x07,
            //   0x00, 0xc2, 0x08, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            //   0x90, 0x90, 0x8b, 0x81, 0x10, 0x29, 0x00, 0x00, 0x8b, 0x40,
            //   0x20, 0xc3, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xb8, 0xcc,
            //   0x24, 0x00, 0x00, 0xe8, 0x36, 0x15, 0x0d, 0x00, 0x53, 0x55,
            //   0x56, 0x8b, 0xb4, 0x24
            // };
  
            // 0x004b2170 RU
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x8b, 0x44, 0x24, 0x08, 0x8b, 0x54, 0x24, 0x04, 0x8b, 0x89,
            //   0x10, 0x29, 0x00, 0x00, 0x50, 0x52, 0xe8, 0xbb, 0x54, 0x07,
            //   0x00, 0xc2, 0x08, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            //   0x90, 0x90, 0x8b, 0x81, 0x10, 0x29, 0x00, 0x00, 0x8b, 0x40,
            //   0x20, 0xc3, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xb8, 0xcc,
            //   0x24, 0x00, 0x00, 0xe8, 0x56, 0x15, 0x0d, 0x00, 0x53, 0x55,
            //   0x56, 0x8b, 0xb4, 0x24
            // };
  
            var npRegisterCommand;
            var npRegisterCommandPattern = "83 ec 14 55 56 57 6a 1b 68 ?? ?? 5b 00 68 18 ?? 5a 00 89 4c 24 18 6a 10 e8 33 41 ff ff 33 f6 83 c4 10 3b c6 74 0f 89 30 89 70 04 89 70 0c 89 70 08 8b e8 eb 02 33 ed 53 8b 5c 24 28 53 e8 fe 7d";
            var npRegisterCommandScanResults = Memory.scanSync(ratModule.base, ratModule.size, npRegisterCommandPattern);
            if (npRegisterCommandScanResults.length != 0) {
              npRegisterCommand = npRegisterCommandScanResults[0].address;
            } else {
              console.log("Could not locate the npRegisterCommand. Aborting...");
              return;
            }

            Interceptor.attach(npRegisterCommand, {
              onEnter: args => {
                commandNames.push(args[0].readAnsiString());
              }
            });
            global.dumpCommandNames = () => { console.log(commandNames); };
            global.dumpCommandNamesPretty = () => { console.log(commandNames.join("\n")); };
            // Aggregate
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x83, 0xec, 0x14, 0x55, 0x56, 0x57, 0x6a, 0x1b, 0x68, ??,
            //   ??, 0x5b, 0x00, 0x68, 0x18, ??, 0x5a, 0x00, 0x89, 0x4c,
            //   0x24, 0x18, 0x6a, 0x10, 0xe8, 0x33, 0x41, 0xff, 0xff, 0x33,
            //   0xf6, 0x83, 0xc4, 0x10, 0x3b, 0xc6, 0x74, 0x0f, 0x89, 0x30,
            //   0x89, 0x70, 0x04, 0x89, 0x70, 0x0c, 0x89, 0x70, 0x08, 0x8b,
            //   0xe8, 0xeb, 0x02, 0x33, 0xed, 0x53, 0x8b, 0x5c, 0x24, 0x28,
            //   0x53, 0xe8, 0xfe, 0x7d
            // };
  
            // 0x004b1f70 EU
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x83, 0xec, 0x14, 0x55, 0x56, 0x57, 0x6a, 0x1b, 0x68, 0xcc,
            //   0x30, 0x5b, 0x00, 0x68, 0x18, 0xc7, 0x5a, 0x00, 0x89, 0x4c,
            //   0x24, 0x18, 0x6a, 0x10, 0xe8, 0x33, 0x41, 0xff, 0xff, 0x33,
            //   0xf6, 0x83, 0xc4, 0x10, 0x3b, 0xc6, 0x74, 0x0f, 0x89, 0x30,
            //   0x89, 0x70, 0x04, 0x89, 0x70, 0x0c, 0x89, 0x70, 0x08, 0x8b,
            //   0xe8, 0xeb, 0x02, 0x33, 0xed, 0x53, 0x8b, 0x5c, 0x24, 0x28,
            //   0x53, 0xe8, 0xfe, 0x7d
            // };
  
            // 0x004b1f90 PL
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x83, 0xec, 0x14, 0x55, 0x56, 0x57, 0x6a, 0x1b, 0x68, 0xf4,
            //   0x40, 0x5b, 0x00, 0x68, 0x18, 0xd7, 0x5a, 0x00, 0x89, 0x4c,
            //   0x24, 0x18, 0x6a, 0x10, 0xe8, 0x33, 0x41, 0xff, 0xff, 0x33,
            //   0xf6, 0x83, 0xc4, 0x10, 0x3b, 0xc6, 0x74, 0x0f, 0x89, 0x30,
            //   0x89, 0x70, 0x04, 0x89, 0x70, 0x0c, 0x89, 0x70, 0x08, 0x8b,
            //   0xe8, 0xeb, 0x02, 0x33, 0xed, 0x53, 0x8b, 0x5c, 0x24, 0x28,
            //   0x53, 0xe8, 0xfe, 0x7d
            // };
  
            // 0x004b1f70 RU
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x83, 0xec, 0x14, 0x55, 0x56, 0x57, 0x6a, 0x1b, 0x68, 0xf8,
            //   0x40, 0x5b, 0x00, 0x68, 0x18, 0xd7, 0x5a, 0x00, 0x89, 0x4c,
            //   0x24, 0x18, 0x6a, 0x10, 0xe8, 0x33, 0x41, 0xff, 0xff, 0x33,
            //   0xf6, 0x83, 0xc4, 0x10, 0x3b, 0xc6, 0x74, 0x0f, 0x89, 0x30,
            //   0x89, 0x70, 0x04, 0x89, 0x70, 0x0c, 0x89, 0x70, 0x08, 0x8b,
            //   0xe8, 0xeb, 0x02, 0x33, 0xed, 0x53, 0x8b, 0x5c, 0x24, 0x28,
            //   0x53, 0xe8, 0xfe, 0x7d
            // };

            // random menu thing
 
            var npModernPopupMenuCondition;
            var npModernPopupMenuConditionPattern = "f6 05 ?? ?? 5d 00 01 74 b6 53 ff 15 28 ?? 59 00 5f 5e 5d b8 01 00 00 00 5b c2 10 00 c6 05 ?? ?? 5d 00 01 eb 9a 5f 5e 5d 33 c0 5b c2 10 00 81 fe 01 02 00 00 77 89 74 87 8b c6 2d 04 01 00 00 0f";
            var npModernPopupMenuConditionScanResults = Memory.scanSync(ratModule.base, ratModule.size, npModernPopupMenuConditionPattern);
            if (npModernPopupMenuConditionScanResults.length != 0) {
              npModernPopupMenuCondition = npModernPopupMenuConditionScanResults[0].address.add(2);
            } else {
              console.log("Could not locate the npModernPopupMenuCondition. Aborting...");
              return;
            }

            global.enableContextMenu = () => {
              var addr = npModernPopupMenuCondition.readPointer();
              var flags = addr.readU32();
              addr.writeU32((flags | 0x4) & (~0x1));
            };

            global.disableContextMenu = () => {
              var addr = npModernPopupMenuCondition.readPointer();
              var flags = addr.readU32();
              addr.writeU32((flags & (~0x4)) | 0x1);
            };

            // Amalgamated
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0xf6, 0x05, ??, ??, 0x5d, 0x00, 0x01, 0x74, 0xb6, 0x53,
            //   0xff, 0x15, 0x28, ??, 0x59, 0x00, 0x5f, 0x5e, 0x5d, 0xb8,
            //   0x01, 0x00, 0x00, 0x00, 0x5b, 0xc2, 0x10, 0x00, 0xc6, 0x05,
            //   ??, ??, 0x5d, 0x00, 0x01, 0xeb, 0x9a, 0x5f, 0x5e, 0x5d,
            //   0x33, 0xc0, 0x5b, 0xc2, 0x10, 0x00, 0x81, 0xfe, 0x01, 0x02,
            //   0x00, 0x00, 0x77, 0x89, 0x74, 0x87, 0x8b, 0xc6, 0x2d, 0x04,
            //   0x01, 0x00, 0x00, 0x0f
            // };

            // 0x004A497C EU
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0xf6, 0x05, 0x94, 0x5c, 0x5d, 0x00, 0x01, 0x74, 0xb6, 0x53,
            //   0xff, 0x15, 0x28, 0x22, 0x59, 0x00, 0x5f, 0x5e, 0x5d, 0xb8,
            //   0x01, 0x00, 0x00, 0x00, 0x5b, 0xc2, 0x10, 0x00, 0xc6, 0x05,
            //   0xc4, 0x5d, 0x5d, 0x00, 0x01, 0xeb, 0x9a, 0x5f, 0x5e, 0x5d,
            //   0x33, 0xc0, 0x5b, 0xc2, 0x10, 0x00, 0x81, 0xfe, 0x01, 0x02,
            //   0x00, 0x00, 0x77, 0x89, 0x74, 0x87, 0x8b, 0xc6, 0x2d, 0x04,
            //   0x01, 0x00, 0x00, 0x0f
            // };
            
            // 0x004A4948 PL
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0xf6, 0x05, 0xd4, 0x6c, 0x5d, 0x00, 0x01, 0x74, 0xb6, 0x53,
            //   0xff, 0x15, 0x28, 0x32, 0x59, 0x00, 0x5f, 0x5e, 0x5d, 0xb8,
            //   0x01, 0x00, 0x00, 0x00, 0x5b, 0xc2, 0x10, 0x00, 0xc6, 0x05,
            //   0x04, 0x6e, 0x5d, 0x00, 0x01, 0xeb, 0x9a, 0x5f, 0x5e, 0x5d,
            //   0x33, 0xc0, 0x5b, 0xc2, 0x10, 0x00, 0x81, 0xfe, 0x01, 0x02,
            //   0x00, 0x00, 0x77, 0x89, 0x74, 0x87, 0x8b, 0xc6, 0x2d, 0x04,
            //   0x01, 0x00, 0x00, 0x0f
            // };
            
            // 0x004A4928 RU
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0xf6, 0x05, 0xd4, 0x6c, 0x5d, 0x00, 0x01, 0x74, 0xb6, 0x53,
            //   0xff, 0x15, 0x28, 0x32, 0x59, 0x00, 0x5f, 0x5e, 0x5d, 0xb8,
            //   0x01, 0x00, 0x00, 0x00, 0x5b, 0xc2, 0x10, 0x00, 0xc6, 0x05,
            //   0x04, 0x6e, 0x5d, 0x00, 0x01, 0xeb, 0x9a, 0x5f, 0x5e, 0x5d,
            //   0x33, 0xc0, 0x5b, 0xc2, 0x10, 0x00, 0x81, 0xfe, 0x01, 0x02,
            //   0x00, 0x00, 0x77, 0x89, 0x74, 0x87, 0x8b, 0xc6, 0x2d, 0x04,
            //   0x01, 0x00, 0x00, 0x0f
            // };
          } else {
            // rat
            var isRU = false; // russian version

            var nppGlobalCommandState;
            var nppGlobalCommandStatePattern = "8b 0d ?? ?? ?? ?? 6a 00 68 ?? ?? 72 00 c6 05 ?? ?? ?? 00 00 e8 ?? ?? ?? ff 83 05 ?? ?? ?? 00 01 80 3d ?? ?? ?? 00 00 75 f7 e8 ?? a6 ff ff e8 ?? ?? 09 00 84 c0 74 e9 e8 ?? e8 ff ff b0 01 c3 cc";
            var nppGlobalCommandStateScanResults = Memory.scanSync(ratModule.base, ratModule.size, nppGlobalCommandStatePattern);
            if (nppGlobalCommandStateScanResults.length != 0) {
              nppGlobalCommandState = nppGlobalCommandStateScanResults[0].address.add(2).readPointer();
            } else {
              nppGlobalCommandStatePattern = "8b 0d b8 12 78 00 6a 00 68 20 91 6f 00 c6 05 78 22 78 00 00 e8 0c 32 fe ff ff 05 6c 22 78 00 8d 9b 00 00 00 00 a0 a8 3b 79 00 84 c0 75 f7 e8 32 ae ff ff e8 bd 85 fb ff 84 c0 74 e9 e8 e4 e8 ff";
              nppGlobalCommandStateScanResults = Memory.scanSync(ratModule.base, ratModule.size, nppGlobalCommandStatePattern);
              if (nppGlobalCommandStateScanResults.length != 0) {
                nppGlobalCommandState = new NativePointer('0x007812b8');
                isRU = true;
              } else {
                console.log("Could not locate the nppGlobalCommandState. Aborting...");
                return;
              }
            }
            // Aggregate
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x8b, 0x0d, ??, ??, ??, ??, 0x6a, 0x00, 0x68, ??,
            //   ??, 0x72, 0x00, 0xc6, 0x05, ??, ??, ??, 0x00, 0x00,
            //   0xe8, ??, ??, ??, 0xff, 0x83, 0x05, ??, ??, ??,
            //   0x00, 0x01, 0x80, 0x3d, ??, ??, ??, 0x00, 0x00, 0x75,
            //   0xf7, 0xe8, ??, 0xa6, 0xff, 0xff, 0xe8, ??, ??, 0x09,
            //   0x00, 0x84, 0xc0, 0x74, 0xe9, 0xe8, ??, 0xe8, 0xff, 0xff,
            //   0xb0, 0x01, 0xc3, 0xcc
            // };

            // 0x007de8a0 US
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x8b, 0x0d, 0xa0, 0xe8, 0x7d, 0x00, 0x6a, 0x00, 0x68, 0xd8,
            //   0x9f, 0x72, 0x00, 0xc6, 0x05, 0x60, 0xf9, 0x7d, 0x00, 0x00,
            //   0xe8, 0x0c, 0x05, 0xfe, 0xff, 0x83, 0x05, 0x54, 0xf9, 0x7d,
            //   0x00, 0x01, 0x80, 0x3d, 0xf8, 0xc7, 0x7d, 0x00, 0x00, 0x75,
            //   0xf7, 0xe8, 0x77, 0xa6, 0xff, 0xff, 0xe8, 0xa2, 0x20, 0x09,
            //   0x00, 0x84, 0xc0, 0x74, 0xe9, 0xe8, 0x39, 0xe8, 0xff, 0xff,
            //   0xb0, 0x01, 0xc3, 0xcc
            // };

            // 0x007e2d00 DE/ES
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x8b, 0x0d, 0x00, 0x2d, 0x7e, 0x00, 0x6a, 0x00, 0x68, 0xfc,
            //   0xbd, 0x72, 0x00, 0xc6, 0x05, 0xc0, 0x3d, 0x7e, 0x00, 0x00,
            //   0xe8, 0x4c, 0xff, 0xfd, 0xff, 0x83, 0x05, 0xb4, 0x3d, 0x7e,
            //   0x00, 0x01, 0x80, 0x3d, 0x98, 0x09, 0x7e, 0x00, 0x00, 0x75,
            //   0xf7, 0xe8, 0x87, 0xa6, 0xff, 0xff, 0xe8, 0xc2, 0x38, 0x09,
            //   0x00, 0x84, 0xc0, 0x74, 0xe9, 0xe8, 0x49, 0xe8, 0xff, 0xff,
            //   0xb0, 0x01, 0xc3, 0xcc
            // };

            // 0x007e2d48 SC
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x8b, 0x0d, 0x48, 0x2d, 0x7e, 0x00, 0x6a, 0x00, 0x68, 0xfc,
            //   0xbd, 0x72, 0x00, 0xc6, 0x05, 0x08, 0x3e, 0x7e, 0x00, 0x00,
            //   0xe8, 0x4c, 0xff, 0xfd, 0xff, 0x83, 0x05, 0xfc, 0x3d, 0x7e,
            //   0x00, 0x01, 0x80, 0x3d, 0x98, 0x09, 0x7e, 0x00, 0x00, 0x75,
            //   0xf7, 0xe8, 0x87, 0xa6, 0xff, 0xff, 0xe8, 0x02, 0x39, 0x09,
            //   0x00, 0x84, 0xc0, 0x74, 0xe9, 0xe8, 0x49, 0xe8, 0xff, 0xff,
            //   0xb0, 0x01, 0xc3, 0xcc
            // };

            // 0x FR/NL

            // 0x007dd8a0 US 2k
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x8b, 0x0d, 0xa0, 0xd8, 0x7d, 0x00, 0x6a, 0x00, 0x68, 0xc8,
            //   0x8f, 0x72, 0x00, 0xc6, 0x05, 0x60, 0xe9, 0x7d, 0x00, 0x00,
            //   0xe8, 0x0c, 0x05, 0xfe, 0xff, 0x83, 0x05, 0x54, 0xe9, 0x7d,
            //   0x00, 0x01, 0x80, 0x3d, 0xf8, 0xb7, 0x7d, 0x00, 0x00, 0x75,
            //   0xf7, 0xe8, 0x77, 0xa6, 0xff, 0xff, 0xe8, 0x12, 0x20, 0x09,
            //   0x00, 0x84, 0xc0, 0x74, 0xe9, 0xe8, 0x39, 0xe8, 0xff, 0xff,
            //   0xb0, 0x01, 0xc3, 0xcc
            // };

            // 0x007e2d00 DE/ES 2k
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x8b, 0x0d, 0x00, 0x2d, 0x7e, 0x00, 0x6a, 0x00, 0x68, 0xec,
            //   0xbd, 0x72, 0x00, 0xc6, 0x05, 0xc0, 0x3d, 0x7e, 0x00, 0x00,
            //   0xe8, 0x4c, 0xff, 0xfd, 0xff, 0x83, 0x05, 0xb4, 0x3d, 0x7e,
            //   0x00, 0x01, 0x80, 0x3d, 0x98, 0x09, 0x7e, 0x00, 0x00, 0x75,
            //   0xf7, 0xe8, 0x87, 0xa6, 0xff, 0xff, 0xe8, 0x32, 0x38, 0x09,
            //   0x00, 0x84, 0xc0, 0x74, 0xe9, 0xe8, 0x49, 0xe8, 0xff, 0xff,
            //   0xb0, 0x01, 0xc3, 0xcc
            // };

            // 0x007e2d48 SC 2k
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x8b, 0x0d, 0x48, 0x2d, 0x7e, 0x00, 0x6a, 0x00, 0x68, 0xec,
            //   0xbd, 0x72, 0x00, 0xc6, 0x05, 0x08, 0x3e, 0x7e, 0x00, 0x00,
            //   0xe8, 0x4c, 0xff, 0xfd, 0xff, 0x83, 0x05, 0xfc, 0x3d, 0x7e,
            //   0x00, 0x01, 0x80, 0x3d, 0x98, 0x09, 0x7e, 0x00, 0x00, 0x75,
            //   0xf7, 0xe8, 0x87, 0xa6, 0xff, 0xff, 0xe8, 0x72, 0x38, 0x09,
            //   0x00, 0x84, 0xc0, 0x74, 0xe9, 0xe8, 0x49, 0xe8, 0xff, 0xff,
            //   0xb0, 0x01, 0xc3, 0xcc
            // };

            // 0x FR/NL 2k

            // 0x007812b8 RU.dll
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x8b, 0x0d, 0xb8, 0x12, 0x78, 0x00, 0x6a, 0x00, 0x68, 0x20,
            //   0x91, 0x6f, 0x00, 0xc6, 0x05, 0x78, 0x22, 0x78, 0x00, 0x00,
            //   0xe8, 0x0c, 0x32, 0xfe, 0xff, 0xff, 0x05, 0x6c, 0x22, 0x78,
            //   0x00, 0x8d, 0x9b, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa8, 0x3b,
            //   0x79, 0x00, 0x84, 0xc0, 0x75, 0xf7, 0xe8, 0x32, 0xae, 0xff,
            //   0xff, 0xe8, 0xbd, 0x85, 0xfb, 0xff, 0x84, 0xc0, 0x74, 0xe9,
            //   0xe8, 0xe4, 0xe8, 0xff
            // };

            var nfRunCommand;
            var nfRunCommandPattern = "b8 10 40 00 00 e8 ?? ?? ?? 00 a1 ?? ?? 7c 00 33 c4 89 84 24 0c 40 00 00 55 57 8b bc 24 1c 40 00 00 8b e9 89 7c 24 08 8d 44 24 14 b9 0f 00 00 00 c6 00 00 05 00 04 00 00 83 e9 01 79 f3 8b c7 8d";
            var nfRunCommandScanResults = Memory.scanSync(ratModule.base, ratModule.size, nfRunCommandPattern);
            if (nfRunCommandScanResults.length != 0) {
              nfRunCommand = new NativeFunction(nfRunCommandScanResults[0].address, "bool", ["pointer", "pointer", "uint32"], 'thiscall');
            } else if (isRU) {
              nfRunCommand = new NativeFunction(new NativePointer('0x005a0c50'), "bool", ["pointer", "pointer", "uint32"], 'thiscall');
            } else {
              console.log("Could not locate the nfRunCommand. Aborting...");
              return;
            }

            Interceptor.attach(nfRunCommand, {
              onEnter: args => {
                if (logCommands) {
                  this.command_line = args[0].readAnsiString();
                }
              },
              onLeave: (retval) => {
                if (logCommands && checkNotExcluded(this.command_line)) {
                  console.log("\"" + this.command_line + "\" " + (retval.toInt32() & 0xFF));
                }
              }
            });

            global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) };
            // Aggregate
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0xb8, 0x10, 0x40, 0x00, 0x00, 0xe8, ??, ??, ??, 0x00,
            //   0xa1, ??, ??, 0x7c, 0x00, 0x33, 0xc4, 0x89, 0x84, 0x24,
            //   0x0c, 0x40, 0x00, 0x00, 0x55, 0x57, 0x8b, 0xbc, 0x24, 0x1c,
            //   0x40, 0x00, 0x00, 0x8b, 0xe9, 0x89, 0x7c, 0x24, 0x08, 0x8d,
            //   0x44, 0x24, 0x14, 0xb9, 0x0f, 0x00, 0x00, 0x00, 0xc6, 0x00,
            //   0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79,
            //   0xf3, 0x8b, 0xc7, 0x8d
            // };

            // 0x005a6e20 US
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0xb8, 0x10, 0x40, 0x00, 0x00, 0xe8, 0x26, 0xf4, 0x10, 0x00,
            //   0xa1, 0x38, 0x3f, 0x7c, 0x00, 0x33, 0xc4, 0x89, 0x84, 0x24,
            //   0x0c, 0x40, 0x00, 0x00, 0x55, 0x57, 0x8b, 0xbc, 0x24, 0x1c,
            //   0x40, 0x00, 0x00, 0x8b, 0xe9, 0x89, 0x7c, 0x24, 0x08, 0x8d,
            //   0x44, 0x24, 0x14, 0xb9, 0x0f, 0x00, 0x00, 0x00, 0xc6, 0x00,
            //   0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79,
            //   0xf3, 0x8b, 0xc7, 0x8d
            // };

            // 0x005a7ac0 DE/ES
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0xb8, 0x10, 0x40, 0x00, 0x00, 0xe8, 0x76, 0x14, 0x11, 0x00,
            //   0xa1, 0xf8, 0x80, 0x7c, 0x00, 0x33, 0xc4, 0x89, 0x84, 0x24,
            //   0x0c, 0x40, 0x00, 0x00, 0x55, 0x57, 0x8b, 0xbc, 0x24, 0x1c,
            //   0x40, 0x00, 0x00, 0x8b, 0xe9, 0x89, 0x7c, 0x24, 0x08, 0x8d,
            //   0x44, 0x24, 0x14, 0xb9, 0x0f, 0x00, 0x00, 0x00, 0xc6, 0x00,
            //   0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79,
            //   0xf3, 0x8b, 0xc7, 0x8d
            // };

            // 0x005a7ac0 SC
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0xb8, 0x10, 0x40, 0x00, 0x00, 0xe8, 0xb6, 0x14, 0x11, 0x00,
            //   0xa1, 0xf8, 0x80, 0x7c, 0x00, 0x33, 0xc4, 0x89, 0x84, 0x24,
            //   0x0c, 0x40, 0x00, 0x00, 0x55, 0x57, 0x8b, 0xbc, 0x24, 0x1c,
            //   0x40, 0x00, 0x00, 0x8b, 0xe9, 0x89, 0x7c, 0x24, 0x08, 0x8d,
            //   0x44, 0x24, 0x14, 0xb9, 0x0f, 0x00, 0x00, 0x00, 0xc6, 0x00,
            //   0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79,
            //   0xf3, 0x8b, 0xc7, 0x8d
            // };

            // 0x FR/NL

            // 0x005a6e20 US 2k
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0xb8, 0x10, 0x40, 0x00, 0x00, 0xe8, 0xf6, 0xeb, 0x10, 0x00,
            //   0xa1, 0x38, 0x2f, 0x7c, 0x00, 0x33, 0xc4, 0x89, 0x84, 0x24,
            //   0x0c, 0x40, 0x00, 0x00, 0x55, 0x57, 0x8b, 0xbc, 0x24, 0x1c,
            //   0x40, 0x00, 0x00, 0x8b, 0xe9, 0x89, 0x7c, 0x24, 0x08, 0x8d,
            //   0x44, 0x24, 0x14, 0xb9, 0x0f, 0x00, 0x00, 0x00, 0xc6, 0x00,
            //   0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79,
            //   0xf3, 0x8b, 0xc7, 0x8d
            // };

            // 0x005a7950 DE/ES 2k
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0xb8, 0x10, 0x40, 0x00, 0x00, 0xe8, 0x46, 0x0c, 0x11, 0x00,
            //   0xa1, 0xe8, 0x80, 0x7c, 0x00, 0x33, 0xc4, 0x89, 0x84, 0x24,
            //   0x0c, 0x40, 0x00, 0x00, 0x55, 0x57, 0x8b, 0xbc, 0x24, 0x1c,
            //   0x40, 0x00, 0x00, 0x8b, 0xe9, 0x89, 0x7c, 0x24, 0x08, 0x8d,
            //   0x44, 0x24, 0x14, 0xb9, 0x0f, 0x00, 0x00, 0x00, 0xc6, 0x00,
            //   0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79,
            //   0xf3, 0x8b, 0xc7, 0x8d
            // };

            // 0x005a7ac0 SC 2k
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0xb8, 0x10, 0x40, 0x00, 0x00, 0xe8, 0x86, 0x0c, 0x11, 0x00,
            //   0xa1, 0xe8, 0x80, 0x7c, 0x00, 0x33, 0xc4, 0x89, 0x84, 0x24,
            //   0x0c, 0x40, 0x00, 0x00, 0x55, 0x57, 0x8b, 0xbc, 0x24, 0x1c,
            //   0x40, 0x00, 0x00, 0x8b, 0xe9, 0x89, 0x7c, 0x24, 0x08, 0x8d,
            //   0x44, 0x24, 0x14, 0xb9, 0x0f, 0x00, 0x00, 0x00, 0xc6, 0x00,
            //   0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79,
            //   0xf3, 0x8b, 0xc7, 0x8d
            // };

            // 0x FR/NL 2k

            // 0x005a0c50 RU.dll
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0xb8, 0x0c, 0x40, 0x00, 0x00, 0xe8, 0xc6, 0x7a, 0x10, 0x00,
            //   0x53, 0x55, 0x8b, 0xe9, 0x8d, 0x44, 0x24, 0x14, 0xb9, 0x10,
            //   0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00,
            //   0x00, 0x49, 0x75, 0xf5, 0x8b, 0x9c, 0x24, 0x18, 0x40, 0x00,
            //   0x00, 0x8b, 0xc3, 0x8d, 0x50, 0x01, 0x8b, 0xff, 0x8a, 0x08,
            //   0x40, 0x84, 0xc9, 0x75, 0xf9, 0x2b, 0xc2, 0x89, 0x44, 0x24,
            //   0x10, 0x75, 0x0d, 0x5d
            // };

            var npRegisterCommand;
            var npRegisterCommandPattern = "83 ec 18 a1 ?? ?? 7c 00 33 c4 89 44 24 14 53 55 8b 6c 24 24 57 6a 1a 68 ?? ?? 72 00 68 ?? ?? ?? 00 6a 10 89 4c 24 1c e8 ?? ?? fc ff 33 db 83 c4 10 3b c3 74 0f 89 18 89 58 04 89 58 0c 89 58 08";
            var npRegisterCommandScanResults = Memory.scanSync(ratModule.base, ratModule.size, npRegisterCommandPattern);
            if (npRegisterCommandScanResults.length != 0) {
              npRegisterCommand = npRegisterCommandScanResults[0].address;
            } else if (isRU) {
              npRegisterCommand = new NativePointer('0x005a08a0');
            } else {
              console.log("Could not locate the npRegisterCommand. Aborting...");
              return;
            }

            Interceptor.attach(npRegisterCommand, {
              onEnter: args => {
                commandNames.push(args[0].readAnsiString());
              }
            });

            global.dumpCommandNames = () => { console.log(commandNames); };
            global.dumpCommandNamesPretty = () => { console.log(commandNames.join("\n")); };
            // Aggregate
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x83, 0xec, 0x18, 0xa1, ??, ??, 0x7c, 0x00, 0x33, 0xc4,
            //   0x89, 0x44, 0x24, 0x14, 0x53, 0x55, 0x8b, 0x6c, 0x24, 0x24,
            //   0x57, 0x6a, 0x1a, 0x68, ??, ??, 0x72, 0x00, 0x68, ??,
            //   ??, ??,, 0x00, 0x6a, 0x10, 0x89, 0x4c, 0x24, 0x1c, 0xe8,
            //   ??, ??, 0xfc, 0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b,
            //   0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58,
            //   0x0c, 0x89, 0x58, 0x08
            // };

            // 0x005a6a70 US
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x83, 0xec, 0x18, 0xa1, 0x38, 0x3f, 0x7c, 0x00, 0x33, 0xc4,
            //   0x89, 0x44, 0x24, 0x14, 0x53, 0x55, 0x8b, 0x6c, 0x24, 0x24,
            //   0x57, 0x6a, 0x1a, 0x68, 0x68, 0x7d, 0x72, 0x00, 0x68, 0x2c,
            //   0x0c, 0x71, 0x00, 0x6a, 0x10, 0x89, 0x4c, 0x24, 0x1c, 0xe8,
            //   0xa4, 0x57, 0xfc, 0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b,
            //   0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58,
            //   0x0c, 0x89, 0x58, 0x08
            // };

            // 0x005a7710 DE/ES
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x83, 0xec, 0x18, 0xa1, 0xf8, 0x80, 0x7c, 0x00, 0x33, 0xc4,
            //   0x89, 0x44, 0x24, 0x14, 0x53, 0x55, 0x8b, 0x6c, 0x24, 0x24,
            //   0x57, 0x6a, 0x1a, 0x68, 0xc4, 0x9b, 0x72, 0x00, 0x68, 0xe4,
            //   0x2b, 0x71, 0x00, 0x6a, 0x10, 0x89, 0x4c, 0x24, 0x1c, 0xe8,
            //   0x64, 0x55, 0xfc, 0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b,
            //   0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58,
            //   0x0c, 0x89, 0x58, 0x08
            // };

            // 0x005a7710 SC
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x83, 0xec, 0x18, 0xa1, 0xf8, 0x80, 0x7c, 0x00, 0x33, 0xc4,
            //   0x89, 0x44, 0x24, 0x14, 0x53, 0x55, 0x8b, 0x6c, 0x24, 0x24,
            //   0x57, 0x6a, 0x1a, 0x68, 0xc4, 0x9b, 0x72, 0x00, 0x68, 0xe4,
            //   0x2b, 0x71, 0x00, 0x6a, 0x10, 0x89, 0x4c, 0x24, 0x1c, 0xe8,
            //   0x64, 0x55, 0xfc, 0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b,
            //   0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58,
            //   0x0c, 0x89, 0x58, 0x08
            // };

            // 0x FR/NL

            // 0x005a6a70 US 2k
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x83, 0xec, 0x18, 0xa1, 0x38, 0x2f, 0x7c, 0x00, 0x33, 0xc4,
            //   0x89, 0x44, 0x24, 0x14, 0x53, 0x55, 0x8b, 0x6c, 0x24, 0x24,
            //   0x57, 0x6a, 0x1a, 0x68, 0x58, 0x6d, 0x72, 0x00, 0x68, 0x1c,
            //   0xfc, 0x70, 0x00, 0x6a, 0x10, 0x89, 0x4c, 0x24, 0x1c, 0xe8,
            //   0xa4, 0x57, 0xfc, 0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b,
            //   0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58,
            //   0x0c, 0x89, 0x58, 0x08
            // };

            // 0x005a75a0 DE/ES 2k
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x83, 0xec, 0x18, 0xa1, 0xe8, 0x80, 0x7c, 0x00, 0x33, 0xc4,
            //   0x89, 0x44, 0x24, 0x14, 0x53, 0x55, 0x8b, 0x6c, 0x24, 0x24,
            //   0x57, 0x6a, 0x1a, 0x68, 0xb4, 0x9b, 0x72, 0x00, 0x68, 0xd4,
            //   0x2b, 0x71, 0x00, 0x6a, 0x10, 0x89, 0x4c, 0x24, 0x1c, 0xe8,
            //   0x64, 0x55, 0xfc, 0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b,
            //   0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58,
            //   0x0c, 0x89, 0x58, 0x08
            // };

            // 0x005a7710 SC 2k
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x83, 0xec, 0x18, 0xa1, 0xe8, 0x80, 0x7c, 0x00, 0x33, 0xc4,
            //   0x89, 0x44, 0x24, 0x14, 0x53, 0x55, 0x8b, 0x6c, 0x24, 0x24,
            //   0x57, 0x6a, 0x1a, 0x68, 0xb4, 0x9b, 0x72, 0x00, 0x68, 0xd4,
            //   0x2b, 0x71, 0x00, 0x6a, 0x10, 0x89, 0x4c, 0x24, 0x1c, 0xe8,
            //   0x64, 0x55, 0xfc, 0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b,
            //   0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58,
            //   0x0c, 0x89, 0x58, 0x08
            // };

            // 0x FR/NL 2k

            // 0x005a08a0 RU.dll
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x83, 0xec, 0x18, 0xa1, 0xbc, 0xa7, 0x77, 0x00, 0x33, 0x44,
            //   0x24, 0x18, 0x53, 0x57, 0x6a, 0x1a, 0x68, 0x48, 0x71, 0x6f,
            //   0x00, 0x68, 0x2c, 0xf6, 0x6d, 0x00, 0x6a, 0x10, 0x89, 0x44,
            //   0x24, 0x2c, 0x89, 0x4c, 0x24, 0x18, 0xe8, 0x27, 0x2f, 0xfc,
            //   0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b, 0xc3, 0x74, 0x0f,
            //   0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58, 0x0c, 0x89, 0x58,
            //   0x08, 0x8b, 0xf8, 0xeb
            // };

            // random menu thing

            var npModernPopupMenuCondition;
            var npModernPopupMenuConditionPattern = "75 53 a1 ?? ?? ?? 00 80 78 1d 00 74 48 53 56 ff 15 ?? ?? 70 00 8b 1d ?? ?? ?? 00 8d 4c 24 0c 51 8b f0 ff 15 ?? ?? 70 00 8b 57 08 52 56 8b cf e8 df fe ff ff 8b 44 24 10 8b 4c 24 0c 6a 00 53 6a";
            var npModernPopupMenuConditionScanResults = Memory.scanSync(ratModule.base, ratModule.size, npModernPopupMenuConditionPattern);
            if (npModernPopupMenuConditionScanResults.length != 0) {
              npModernPopupMenuCondition = npModernPopupMenuConditionScanResults[0].address.add(1);
            } else if (isRU) {
              npModernPopupMenuCondition = new NativePointer('0x006051fd').add(1);
            } else {
              console.log("Could not locate the npModernPopupMenuCondition. Aborting...");
              return;
            }

            global.enableContextMenu = () => {
              npModernPopupMenuCondition.writeU8(0x00);
            };

            global.disableContextMenu = () => {
              if (isRU) {
                npModernPopupMenuCondition.writeU8(0x54);
              } else {
                npModernPopupMenuCondition.writeU8(0x53);
              }
            };
            
            // Aggregate
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x75, 0x53, 0xa1, ??, ??, ??, 0x00, 0x80, 0x78, 0x1d,
            //   0x00, 0x74, 0x48, 0x53, 0x56, 0xff, 0x15, ??, ??, 0x70,
            //   0x00, 0x8b, 0x1d, ??, ??, ??, 0x00, 0x8d, 0x4c, 0x24,
            //   0x0c, 0x51, 0x8b, 0xf0, 0xff, 0x15, ??, ??, 0x70, 0x00,
            //   0x8b, 0x57, 0x08, 0x52, 0x56, 0x8b, 0xcf, 0xe8, 0xdf, 0xfe,
            //   0xff, 0xff, 0x8b, 0x44, 0x24, 0x10, 0x8b, 0x4c, 0x24, 0x0c,
            //   0x6a, 0x00, 0x53, 0x6a
            // };

            // 0x0066631d US
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x75, 0x53, 0xa1, 0xe4, 0xe8, 0x7d, 0x00, 0x80, 0x78, 0x1d,
            //   0x00, 0x74, 0x48, 0x53, 0x56, 0xff, 0x15, 0x4c, 0x83, 0x70,
            //   0x00, 0x8b, 0x1d, 0x5c, 0xf9, 0x7d, 0x00, 0x8d, 0x4c, 0x24,
            //   0x0c, 0x51, 0x8b, 0xf0, 0xff, 0x15, 0x3c, 0x83, 0x70, 0x00,
            //   0x8b, 0x57, 0x08, 0x52, 0x56, 0x8b, 0xcf, 0xe8, 0xdf, 0xfe,
            //   0xff, 0xff, 0x8b, 0x44, 0x24, 0x10, 0x8b, 0x4c, 0x24, 0x0c,
            //   0x6a, 0x00, 0x53, 0x6a
            // };

            // 0x00668fbd DE/ES
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x75, 0x53, 0xa1, 0x44, 0x2d, 0x7e, 0x00, 0x80, 0x78, 0x1d,
            //   0x00, 0x74, 0x48, 0x53, 0x56, 0xff, 0x15, 0x44, 0xa3, 0x70,
            //   0x00, 0x8b, 0x1d, 0xbc, 0x3d, 0x7e, 0x00, 0x8d, 0x4c, 0x24,
            //   0x0c, 0x51, 0x8b, 0xf0, 0xff, 0x15, 0x4c, 0xa3, 0x70, 0x00,
            //   0x8b, 0x57, 0x08, 0x52, 0x56, 0x8b, 0xcf, 0xe8, 0xdf, 0xfe,
            //   0xff, 0xff, 0x8b, 0x44, 0x24, 0x10, 0x8b, 0x4c, 0x24, 0x0c,
            //   0x6a, 0x00, 0x53, 0x6a
            // };

            // 0x00668ffd SC
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x75, 0x53, 0xa1, 0x8c, 0x2d, 0x7e, 0x00, 0x80, 0x78, 0x1d,
            //   0x00, 0x74, 0x48, 0x53, 0x56, 0xff, 0x15, 0x44, 0xa3, 0x70,
            //   0x00, 0x8b, 0x1d, 0x04, 0x3e, 0x7e, 0x00, 0x8d, 0x4c, 0x24,
            //   0x0c, 0x51, 0x8b, 0xf0, 0xff, 0x15, 0x4c, 0xa3, 0x70, 0x00,
            //   0x8b, 0x57, 0x08, 0x52, 0x56, 0x8b, 0xcf, 0xe8, 0xdf, 0xfe,
            //   0xff, 0xff, 0x8b, 0x44, 0x24, 0x10, 0x8b, 0x4c, 0x24, 0x0c,
            //   0x6a, 0x00, 0x53, 0x6a
            // };

            // 0x FR/NL

            // 0x00666f8d US 2k
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x75, 0x53, 0xa1, 0xe4, 0xd8, 0x7d, 0x00, 0x80, 0x78, 0x1d,
            //   0x00, 0x74, 0x48, 0x53, 0x56, 0xff, 0x15, 0xe8, 0x72, 0x70,
            //   0x00, 0x8b, 0x1d, 0x5c, 0xe9, 0x7d, 0x00, 0x8d, 0x4c, 0x24,
            //   0x0c, 0x51, 0x8b, 0xf0, 0xff, 0x15, 0xec, 0x72, 0x70, 0x00,
            //   0x8b, 0x57, 0x08, 0x52, 0x56, 0x8b, 0xcf, 0xe8, 0xdf, 0xfe,
            //   0xff, 0xff, 0x8b, 0x44, 0x24, 0x10, 0x8b, 0x4c, 0x24, 0x0c,
            //   0x6a, 0x00, 0x53, 0x6a
            // };

            // 0x00669abd DE/ES 2k
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x75, 0x53, 0xa1, 0x44, 0x2d, 0x7e, 0x00, 0x80, 0x78, 0x1d,
            //   0x00, 0x74, 0x48, 0x53, 0x56, 0xff, 0x15, 0xe4, 0xa2, 0x70,
            //   0x00, 0x8b, 0x1d, 0xbc, 0x3d, 0x7e, 0x00, 0x8d, 0x4c, 0x24,
            //   0x0c, 0x51, 0x8b, 0xf0, 0xff, 0x15, 0xe8, 0xa2, 0x70, 0x00,
            //   0x8b, 0x57, 0x08, 0x52, 0x56, 0x8b, 0xcf, 0xe8, 0xdf, 0xfe,
            //   0xff, 0xff, 0x8b, 0x44, 0x24, 0x10, 0x8b, 0x4c, 0x24, 0x0c,
            //   0x6a, 0x00, 0x53, 0x6a
            // };

            // 0x00669c6d SC 2k
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x75, 0x53, 0xa1, 0x8c, 0x2d, 0x7e, 0x00, 0x80, 0x78, 0x1d,
            //   0x00, 0x74, 0x48, 0x53, 0x56, 0xff, 0x15, 0xe4, 0xa2, 0x70,
            //   0x00, 0x8b, 0x1d, 0x04, 0x3e, 0x7e, 0x00, 0x8d, 0x4c, 0x24,
            //   0x0c, 0x51, 0x8b, 0xf0, 0xff, 0x15, 0xe8, 0xa2, 0x70, 0x00,
            //   0x8b, 0x57, 0x08, 0x52, 0x56, 0x8b, 0xcf, 0xe8, 0xdf, 0xfe,
            //   0xff, 0xff, 0x8b, 0x44, 0x24, 0x10, 0x8b, 0x4c, 0x24, 0x0c,
            //   0x6a, 0x00, 0x53, 0x6a
            // };

            // 0x FR/NL 2k

            // 0x006051fd RU.dll
            // #define _BUFFER_SIZE 64
            // const uint8_t buffer[_BUFFER_SIZE] = {
            //   0x75, 0x54, 0xa1, 0xfc, 0x12, 0x78, 0x00, 0x8a, 0x48, 0x1d,
            //   0x84, 0xc9, 0x74, 0x48, 0x53, 0x56, 0xff, 0x15, 0xc0, 0x92,
            //   0x6d, 0x00, 0x8b, 0x1d, 0x74, 0x22, 0x78, 0x00, 0x8d, 0x4c,
            //   0x24, 0x0c, 0x51, 0x8b, 0xf0, 0xff, 0x15, 0xc4, 0x92, 0x6d,
            //   0x00, 0x8b, 0x57, 0x08, 0x52, 0x56, 0x8b, 0xcf, 0xe8, 0xde,
            //   0xfe, 0xff, 0xff, 0x8b, 0x44, 0x24, 0x10, 0x8b, 0x4c, 0x24,
            //   0x0c, 0x6a, 0x00, 0x53
            // };
          }
        }
      }
    }
  },

  "overlay_win2k": () => { games["overlay"](); },

  "up": () => {
    const upModule = Process.enumerateModules()[0];

    for (const module of Process.enumerateModules()) {
      Memory.protect(module.base, module.size, "rwx");
    }
    
    var nppGlobalCommandState;
    
    var pattern = "8b 0d c8 cc a7 00 6a 00 d9 1d b0 df a7 00 68 5c 78 9e 00 c6 05 b8 df a7 00 00 e8 da 9c f9 ff 83 05 a8 df a7 00 01 80 3d 88 7c a6 00 00 75 f7 e8 b5 f9 ff ff e8 b0 60 17 00 84 c0 74 e9 e8 f7 08";
    var results = Memory.scanSync(upModule.base, upModule.size, pattern);
    
    if (results.length != 0 && results[0].address.equals(new NativePointer('0x00482387'))) {
      console.log("UP RU");
      nppGlobalCommandState = new NativePointer('0x00a7ccc8');
    } else {
      console.log("UP US");
      nppGlobalCommandState = new NativePointer('0x00a7ccb0');
    }
    // 0x00a7ccb0 US
    // 

    // 0x00a7ccc8 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x8b, 0x0d, 0xc8, 0xcc, 0xa7, 0x00, 0x6a, 0x00, 0xd9, 0x1d,
    //   0xb0, 0xdf, 0xa7, 0x00, 0x68, 0x5c, 0x78, 0x9e, 0x00, 0xc6,
    //   0x05, 0xb8, 0xdf, 0xa7, 0x00, 0x00, 0xe8, 0xda, 0x9c, 0xf9,
    //   0xff, 0x83, 0x05, 0xa8, 0xdf, 0xa7, 0x00, 0x01, 0x80, 0x3d,
    //   0x88, 0x7c, 0xa6, 0x00, 0x00, 0x75, 0xf7, 0xe8, 0xb5, 0xf9,
    //   0xff, 0xff, 0xe8, 0xb0, 0x60, 0x17, 0x00, 0x84, 0xc0, 0x74,
    //   0xe9, 0xe8, 0xf7, 0x08
    // };

    var nfRunCommand = new NativeFunction(new NativePointer('0x0041c080'), "bool", ["pointer", "pointer", "uint32"], 'thiscall');

    Interceptor.attach(nfRunCommand, {
      onEnter: args => {
        if (logCommands) {
          this.command_line = args[0].readAnsiString();
        }
      },
      onLeave: (retval) => {
        if (logCommands && checkNotExcluded(this.command_line)) {
          console.log("\"" + this.command_line + "\" " + (retval.toInt32() & 0xFF));
        }
      }
    });

    global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) };
    // 0x0041c080 US
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x58, 0xfc, 0x85, 0x3b, 0x81, 0xe4, 0x56, 0xb5, 0x3c, 0x18,
    //   0xf9, 0xb7, 0x33, 0xcc, 0xf3, 0xad, 0x38, 0x6e, 0x4a, 0x12,
    //   0xb4, 0x62, 0x8d, 0x90, 0x5c, 0x20, 0x95, 0x97, 0xa7, 0xa3,
    //   0x20, 0x7a, 0x19, 0x0b, 0x5e, 0x9e, 0x09, 0xf3, 0x7e, 0x30,
    //   0x2d, 0x57, 0xd7, 0x6e, 0xa9, 0x61, 0x31, 0x60, 0xb5, 0x93,
    //   0x5b, 0xdf, 0x86, 0x7c, 0x13, 0x09, 0x2b, 0x91, 0x22, 0x1a,
    //   0x56, 0x7c, 0xb7, 0x15
    // };

    // 0x0041c080 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0xb8, 0x0c, 0x80, 0x00, 0x00, 0xe8, 0x66, 0x27, 0x48, 0x00,
    //   0x53, 0x56, 0x57, 0x8b, 0xf9, 0x89, 0x7c, 0x24, 0x10, 0x8d,
    //   0x44, 0x24, 0x18, 0xb9, 0x1f, 0x00, 0x00, 0x00, 0x33, 0xdb,
    //   0x8b, 0xff, 0x88, 0x18, 0x05, 0x00, 0x04, 0x00, 0x00, 0x83,
    //   0xe9, 0x01, 0x79, 0xf4, 0x8b, 0x94, 0x24, 0x1c, 0x80, 0x00,
    //   0x00, 0x8b, 0xc2, 0x8d, 0x70, 0x01, 0x8a, 0x08, 0x83, 0xc0,
    //   0x01, 0x84, 0xc9, 0x75
    // };

    var npRegisterCommand = new NativePointer('0x0041bec0');

    Interceptor.attach(npRegisterCommand, {
      onEnter: args => {
        commandNames.push(args[0].readAnsiString());
      }
    });

    global.dumpCommandNames = () => { console.log(commandNames); };
    global.dumpCommandNamesPretty = () => { console.log(commandNames.join("\n")); };
    // 0x0041bec0 US
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0xa3, 0x4d, 0x8b, 0x33, 0xdc, 0xec, 0x4b, 0xec, 0xef, 0x7a,
    //   0x65, 0xa9, 0xed, 0x64, 0x3f, 0xb2, 0xba, 0xc6, 0x8e, 0x6c,
    //   0x56, 0x32, 0x72, 0xbf, 0x8b, 0xcc, 0xb2, 0x95, 0xd4, 0x71,
    //   0xf1, 0xf6, 0xad, 0xa9, 0x8e, 0xdd, 0x70, 0x6f, 0xc7, 0x4f,
    //   0x9f, 0x84, 0xc1, 0xfd, 0xe9, 0x37, 0x4c, 0xdc, 0x8e, 0x12,
    //   0xc3, 0xe3, 0xb0, 0xc5, 0x9f, 0xdb, 0x2f, 0x67, 0xee, 0x9b,
    //   0x8a, 0x89, 0x8d, 0x31
    // };

    // 0x0041bec0 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x83, 0xec, 0x14, 0x53, 0x55, 0x6a, 0x10, 0x89, 0x4c, 0x24,
    //   0x0c, 0xe8, 0x4c, 0x7b, 0x48, 0x00, 0x33, 0xdb, 0x83, 0xc4,
    //   0x04, 0x3b, 0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04,
    //   0x89, 0x58, 0x0c, 0x89, 0x58, 0x08, 0x8b, 0xe8, 0xeb, 0x02,
    //   0x33, 0xed, 0x56, 0x57, 0x8b, 0x7c, 0x24, 0x28, 0x3b, 0xfb,
    //   0x74, 0x0b, 0x33, 0xd2, 0x8b, 0xcf, 0xe8, 0x63, 0x0c, 0x01,
    //   0x00, 0xeb, 0x02, 0x33
    // };
  },

  "csr": () => {
    const csrModule = Process.enumerateModules()[0];

    for (const module of Process.enumerateModules()) {
      Memory.protect(module.base, module.size, "rwx");
    }
    var isRU = false;

    var nppGlobalCommandState;
    var nppGlobalCommandStatePattern = "8b 0d 20 84 5b 00 68 9c 6d 59 00 e8 de 06 fc ff a0 24 ed 5b 00 84 c0 75 f7 a1 34 84 5b 00 8b 0d 28 84 5b 00 83 c0 20 50 e8 f1 ae fb ff 85 c0 74 1c 8b 0d 28 84 5b 00 83 c0 58 50 e8 de ae fb ff";
    var nppGlobalCommandStateScanResults = Memory.scanSync(csrModule.base, csrModule.size, nppGlobalCommandStatePattern);
    if (nppGlobalCommandStateScanResults.length != 0) {
      nppGlobalCommandState = nppGlobalCommandStateScanResults[0].address.add(2).readPointer();
    } else {
      nppGlobalCommandStatePattern = "8b 0d 50 e4 5a 00 68 10 cd 58 00 e8 8e 23 fc ff 8b 0d 64 e4 5a 00 8b 11 ff 52 40 8d 49 00 a0 64 4c 5b 00 84 c0 75 f7 a1 64 e4 5a 00 8b 0d 58 e4 5a 00 83 c0 20 50 e8 33 d1 fb ff 85 c0 74 1c 8b";
      nppGlobalCommandStateScanResults = Memory.scanSync(csrModule.base, csrModule.size, nppGlobalCommandStatePattern);
      if (nppGlobalCommandStateScanResults.length != 0) {
        nppGlobalCommandState = new NativePointer('0x005AE450');
        isRU = true;
      } else {
        console.log("Could not locate the nppGlobalCommandState. Aborting...");
        return;
      }
    }
    
    // 0x005B8420 EU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x8b, 0x0d, 0x20, 0x84, 0x5b, 0x00, 0x68, 0x9c, 0x6d, 0x59,
    //   0x00, 0xe8, 0xde, 0x06, 0xfc, 0xff, 0xa0, 0x24, 0xed, 0x5b,
    //   0x00, 0x84, 0xc0, 0x75, 0xf7, 0xa1, 0x34, 0x84, 0x5b, 0x00,
    //   0x8b, 0x0d, 0x28, 0x84, 0x5b, 0x00, 0x83, 0xc0, 0x20, 0x50,
    //   0xe8, 0xf1, 0xae, 0xfb, 0xff, 0x85, 0xc0, 0x74, 0x1c, 0x8b,
    //   0x0d, 0x28, 0x84, 0x5b, 0x00, 0x83, 0xc0, 0x58, 0x50, 0xe8,
    //   0xde, 0xae, 0xfb, 0xff
    // };

    // 0x005AE450 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x8b, 0x0d, 0x50, 0xe4, 0x5a, 0x00, 0x68, 0x10, 0xcd, 0x58,
    //   0x00, 0xe8, 0x8e, 0x23, 0xfc, 0xff, 0x8b, 0x0d, 0x64, 0xe4,
    //   0x5a, 0x00, 0x8b, 0x11, 0xff, 0x52, 0x40, 0x8d, 0x49, 0x00,
    //   0xa0, 0x64, 0x4c, 0x5b, 0x00, 0x84, 0xc0, 0x75, 0xf7, 0xa1,
    //   0x64, 0xe4, 0x5a, 0x00, 0x8b, 0x0d, 0x58, 0xe4, 0x5a, 0x00,
    //   0x83, 0xc0, 0x20, 0x50, 0xe8, 0x33, 0xd1, 0xfb, 0xff, 0x85,
    //   0xc0, 0x74, 0x1c, 0x8b
    // };

    var nfRunCommand;
    var nfRunCommandPattern = "81 ec 88 08 00 00 a1 ?? ?? 5b 00 53 8b 9c 24 90 08 00 00 89 84 24 88 08 00 00 8b c3 57 8b f9 8d 50 01 8a 08 40 84 c9 75 f9 2b c2 89 44 24 08 75 19 5f 32 c0 5b 8b 8c 24 84 08 00 00 e8 ?? ?? 0c";
    var nfRunCommandScanResults = Memory.scanSync(csrModule.base, csrModule.size, nfRunCommandPattern);
    if (nfRunCommandScanResults.length != 0) {
      nfRunCommand = new NativeFunction(nfRunCommandScanResults[0].address, "bool", ["pointer", "pointer"], 'thiscall');
    } else if (isRU) {
      nfRunCommand = new NativeFunction(new NativePointer('0x00499720'), "bool", ["pointer", "pointer"], 'thiscall');
    } else {
      console.log("Could not locate the nfRunCommand. Aborting...");
      return;
    }

    Interceptor.attach(nfRunCommand, {
      onEnter: args => {
        if (logCommands) {
          this.command_line = args[0].readAnsiString();
        }
      },
      onLeave: (retval) => {
        if (logCommands && checkNotExcluded(this.command_line)) {
          console.log("\"" + this.command_line + "\" " + (retval.toInt32() & 0xFF));
        }
      }
    });

    global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd)) };
            
    // Aggregate
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x81, 0xec, 0x88, 0x08, 0x00, 0x00, 0xa1, ??, ??, 0x5b,
    //   0x00, 0x53, 0x8b, 0x9c, 0x24, 0x90, 0x08, 0x00, 0x00, 0x89,
    //   0x84, 0x24, 0x88, 0x08, 0x00, 0x00, 0x8b, 0xc3, 0x57, 0x8b,
    //   0xf9, 0x8d, 0x50, 0x01, 0x8a, 0x08, 0x40, 0x84, 0xc9, 0x75,
    //   0xf9, 0x2b, 0xc2, 0x89, 0x44, 0x24, 0x08, 0x75, 0x19, 0x5f,
    //   0x32, 0xc0, 0x5b, 0x8b, 0x8c, 0x24, 0x84, 0x08, 0x00, 0x00,
    //   0xe8, ??, ??, 0x0c
    // };
    
    // 0x004A0640 EU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x81, 0xec, 0x88, 0x08, 0x00, 0x00, 0xa1, 0xe8, 0xcf, 0x5b,
    //   0x00, 0x53, 0x8b, 0x9c, 0x24, 0x90, 0x08, 0x00, 0x00, 0x89,
    //   0x84, 0x24, 0x88, 0x08, 0x00, 0x00, 0x8b, 0xc3, 0x57, 0x8b,
    //   0xf9, 0x8d, 0x50, 0x01, 0x8a, 0x08, 0x40, 0x84, 0xc9, 0x75,
    //   0xf9, 0x2b, 0xc2, 0x89, 0x44, 0x24, 0x08, 0x75, 0x19, 0x5f,
    //   0x32, 0xc0, 0x5b, 0x8b, 0x8c, 0x24, 0x84, 0x08, 0x00, 0x00,
    //   0xe8, 0x08, 0x7d, 0x0c
    // };

    // 0x00499720 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x81, 0xec, 0x88, 0x08, 0x00, 0x00, 0xa1, 0xa0, 0x30, 0x5b,
    //   0x00, 0x53, 0x8b, 0x9c, 0x24, 0x90, 0x08, 0x00, 0x00, 0x89,
    //   0x84, 0x24, 0x88, 0x08, 0x00, 0x00, 0x8b, 0xc3, 0x57, 0x8b,
    //   0xf9, 0x8d, 0x50, 0x01, 0x8a, 0x08, 0x40, 0x84, 0xc9, 0x75,
    //   0xf9, 0x2b, 0xc2, 0x89, 0x44, 0x24, 0x08, 0x75, 0x19, 0x5f,
    //   0x32, 0xc0, 0x5b, 0x8b, 0x8c, 0x24, 0x84, 0x08, 0x00, 0x00,
    //   0xe8, 0xd0, 0x4f, 0x0c
    // };
 

    var npRegisterCommand;
    var npRegisterCommandPattern = "83 ec 08 53 55 56 57 6a 16 68 f0 4e 59 00 68 7c 84 58 00 68 dc 00 00 00 89 4c 24 24 e8 ff 16 f6 ff 33 ed 83 c4 10 3b c5 74 16 89 a8 d4 00 00 00 89 a8 d8 00 00 00 89 a8 d0 00 00 00 8b d8 eb 02";
    var npRegisterCommandScanResults = Memory.scanSync(csrModule.base, csrModule.size, npRegisterCommandPattern);
    if (npRegisterCommandScanResults.length != 0) {
      npRegisterCommand = npRegisterCommandScanResults[0].address;
    } else if (isRU) {
      npRegisterCommand = new NativePointer('0x00499350');
    } else {
      console.log("Could not locate the npRegisterCommand. Aborting...");
      return;
    }

    Interceptor.attach(npRegisterCommand, {
      onEnter: args => {
        commandNames.push(args[0].readAnsiString());
      }
    });

    global.dumpCommandNames = () => { console.log(commandNames); };
    global.dumpCommandNamesPretty = () => { console.log(commandNames.join("\n")); };

    // 0x004A0230 EU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x83, 0xec, 0x08, 0x53, 0x55, 0x56, 0x57, 0x6a, 0x16, 0x68,
    //   0xf0, 0x4e, 0x59, 0x00, 0x68, 0x7c, 0x84, 0x58, 0x00, 0x68,
    //   0xdc, 0x00, 0x00, 0x00, 0x89, 0x4c, 0x24, 0x24, 0xe8, 0xff,
    //   0x16, 0xf6, 0xff, 0x33, 0xed, 0x83, 0xc4, 0x10, 0x3b, 0xc5,
    //   0x74, 0x16, 0x89, 0xa8, 0xd4, 0x00, 0x00, 0x00, 0x89, 0xa8,
    //   0xd8, 0x00, 0x00, 0x00, 0x89, 0xa8, 0xd0, 0x00, 0x00, 0x00,
    //   0x8b, 0xd8, 0xeb, 0x02
    // };

    // 0x00499350 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x51, 0x53, 0x55, 0x56, 0x57, 0x8b, 0xd9, 0x68, 0xdc, 0x00,
    //   0x00, 0x00, 0x89, 0x5c, 0x24, 0x14, 0xe8, 0x95, 0x4f, 0x0c,
    //   0x00, 0x33, 0xf6, 0x83, 0xc4, 0x04, 0x3b, 0xc6, 0x74, 0x16,
    //   0x89, 0xb0, 0xd4, 0x00, 0x00, 0x00, 0x89, 0xb0, 0xd8, 0x00,
    //   0x00, 0x00, 0x89, 0xb0, 0xd0, 0x00, 0x00, 0x00, 0x8b, 0xe8,
    //   0xeb, 0x02, 0x33, 0xed, 0x8b, 0x7c, 0x24, 0x18, 0x8b, 0xd7,
    //   0x8b, 0xc5, 0x2b, 0xd5
    // };
  },

  "launch": () => {
    const csrModule = Process.enumerateModules()[0];

    for (const module of Process.enumerateModules()) {
      Memory.protect(module.base, module.size, "rwx");
    }
 

    var nppGlobalCommandState;
    var nppGlobalCommandStatePattern = "8b 0d 60 d2 67 00 68 84 90 63 00 e8 7c 06 00 00 e8 c7 5b 0a 00 8b 0d 74 d2 67 00 8b 01 8b 50 4c ff d2 80 3d b4 43 68 00 00 75 f7 a1 74 d2 67 00 8b 0d 68 d2 67 00 83 c0 24 50 e8 ad 79 0a 00 85";
    var nppGlobalCommandStateScanResults = Memory.scanSync(csrModule.base, csrModule.size, nppGlobalCommandStatePattern);
    if (nppGlobalCommandStateScanResults.length != 0) {
      nppGlobalCommandState = nppGlobalCommandStateScanResults[0].address.add(2).readPointer();
    } else {
      console.log("Could not locate the nppGlobalCommandState. Aborting...");
      return;
    }
    
    // 0x0067D260 EU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x8b, 0x0d, 0x60, 0xd2, 0x67, 0x00, 0x68, 0x84, 0x90, 0x63,
    //   0x00, 0xe8, 0x7c, 0x06, 0x00, 0x00, 0xe8, 0xc7, 0x5b, 0x0a,
    //   0x00, 0x8b, 0x0d, 0x74, 0xd2, 0x67, 0x00, 0x8b, 0x01, 0x8b,
    //   0x50, 0x4c, 0xff, 0xd2, 0x80, 0x3d, 0xb4, 0x43, 0x68, 0x00,
    //   0x00, 0x75, 0xf7, 0xa1, 0x74, 0xd2, 0x67, 0x00, 0x8b, 0x0d,
    //   0x68, 0xd2, 0x67, 0x00, 0x83, 0xc0, 0x24, 0x50, 0xe8, 0xad,
    //   0x79, 0x0a, 0x00, 0x85
    // };
 

    var nfRunCommand;
    var nfRunCommandPattern = "81 ec 8c 08 00 00 a1 64 ea 67 00 33 c4 89 84 24 88 08 00 00 53 8b 9c 24 94 08 00 00 57 8b f9 89 5c 24 0c c6 44 24 10 00 8d 84 24 90 00 00 00 b9 0f 00 00 00 c6 00 00 05 80 00 00 00 83 e9 01 79";
    var nfRunCommandScanResults = Memory.scanSync(csrModule.base, csrModule.size, nfRunCommandPattern);
    if (nfRunCommandScanResults.length != 0) {
      nfRunCommand = new NativeFunction(nfRunCommandScanResults[0].address, "bool", ["pointer", "pointer"], 'thiscall');
    } else {
      console.log("Could not locate the nfRunCommand. Aborting...");
      return;
    }

    Interceptor.attach(nfRunCommand, {
      onEnter: args => {
        if (logCommands) {
          this.command_line = args[0].readAnsiString();
        }
      },
      onLeave: (retval) => {
        if (logCommands && checkNotExcluded(this.command_line)) {
          console.log("\"" + this.command_line + "\" " + (retval.toInt32() & 0xFF));
        }
      }
    });

    global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd)) };
            
    // 0x004EFED0 EU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x81, 0xec, 0x8c, 0x08, 0x00, 0x00, 0xa1, 0x64, 0xea, 0x67,
    //   0x00, 0x33, 0xc4, 0x89, 0x84, 0x24, 0x88, 0x08, 0x00, 0x00,
    //   0x53, 0x8b, 0x9c, 0x24, 0x94, 0x08, 0x00, 0x00, 0x57, 0x8b,
    //   0xf9, 0x89, 0x5c, 0x24, 0x0c, 0xc6, 0x44, 0x24, 0x10, 0x00,
    //   0x8d, 0x84, 0x24, 0x90, 0x00, 0x00, 0x00, 0xb9, 0x0f, 0x00,
    //   0x00, 0x00, 0xc6, 0x00, 0x00, 0x05, 0x80, 0x00, 0x00, 0x00,
    //   0x83, 0xe9, 0x01, 0x79
    // };
 

    var npRegisterCommand;
    var npRegisterCommandPattern = "51 53 55 56 57 8b d9 68 dc 00 00 00 89 5c 24 14 e8 2b 0b 0c 00 33 f6 83 c4 04 3b c6 74 24 c6 00 00 c6 40 40 00 c6 80 c0 00 00 00 00 89 b0 d4 00 00 00 89 b0 d8 00 00 00 89 b0 d0 00 00 00 8b e8";
    var npRegisterCommandScanResults = Memory.scanSync(csrModule.base, csrModule.size, npRegisterCommandPattern);
    if (npRegisterCommandScanResults.length != 0) {
      npRegisterCommand = npRegisterCommandScanResults[0].address;
    } else {
      console.log("Could not locate the npRegisterCommand. Aborting...");
      return;
    }

    Interceptor.attach(npRegisterCommand, {
      onEnter: args => {
        commandNames.push(args[0].readAnsiString());
      }
    });

    global.dumpCommandNames = () => { console.log(commandNames); };
    global.dumpCommandNamesPretty = () => { console.log(commandNames.join("\n")); };

    // 0x004EFD80 EU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x51, 0x53, 0x55, 0x56, 0x57, 0x8b, 0xd9, 0x68, 0xdc, 0x00,
    //   0x00, 0x00, 0x89, 0x5c, 0x24, 0x14, 0xe8, 0x2b, 0x0b, 0x0c,
    //   0x00, 0x33, 0xf6, 0x83, 0xc4, 0x04, 0x3b, 0xc6, 0x74, 0x24,
    //   0xc6, 0x00, 0x00, 0xc6, 0x40, 0x40, 0x00, 0xc6, 0x80, 0xc0,
    //   0x00, 0x00, 0x00, 0x00, 0x89, 0xb0, 0xd4, 0x00, 0x00, 0x00,
    //   0x89, 0xb0, 0xd8, 0x00, 0x00, 0x00, 0x89, 0xb0, 0xd0, 0x00,
    //   0x00, 0x00, 0x8b, 0xe8
    // };
  },

  "ugly": () => {
    const csrModule = Process.enumerateModules()[0];

    for (const module of Process.enumerateModules()) {
      Memory.protect(module.base, module.size, "rwx");
    }
 
    var nppGlobalCommandState;
    var nppGlobalCommandStatePattern = "8b 0d c8 d8 64 00 68 40 1a 62 00 e8 3e 89 fb ff 8b 0d dc d8 64 00 8b 11 ff 52 40 8d 49 00 a0 28 46 65 00 84 c0 75 f7 a1 dc d8 64 00 8b 0d d0 d8 64 00 83 c0 20 50 e8 23 37 fb ff 85 c0 74 1c 8b";
    var nppGlobalCommandStateScanResults = Memory.scanSync(csrModule.base, csrModule.size, nppGlobalCommandStatePattern);
    if (nppGlobalCommandStateScanResults.length != 0) {
      nppGlobalCommandState = nppGlobalCommandStateScanResults[0].address.add(2).readPointer();
    } else {
      console.log("Could not locate the nppGlobalCommandState. Aborting...");
      return;
    }
    
    // 0x0064D8C8 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x8b, 0x0d, 0xc8, 0xd8, 0x64, 0x00, 0x68, 0x40, 0x1a, 0x62,
    //   0x00, 0xe8, 0x3e, 0x89, 0xfb, 0xff, 0x8b, 0x0d, 0xdc, 0xd8,
    //   0x64, 0x00, 0x8b, 0x11, 0xff, 0x52, 0x40, 0x8d, 0x49, 0x00,
    //   0xa0, 0x28, 0x46, 0x65, 0x00, 0x84, 0xc0, 0x75, 0xf7, 0xa1,
    //   0xdc, 0xd8, 0x64, 0x00, 0x8b, 0x0d, 0xd0, 0xd8, 0x64, 0x00,
    //   0x83, 0xc0, 0x20, 0x50, 0xe8, 0x23, 0x37, 0xfb, 0xff, 0x85,
    //   0xc0, 0x74, 0x1c, 0x8b
    // };
 
    var nfRunCommand;
    var nfRunCommandPattern = "81 ec 88 08 00 00 a1 18 25 65 00 53 8b 9c 24 90 08 00 00 89 84 24 88 08 00 00 8b c3 57 8b f9 8d 50 01 8a 08 40 84 c9 75 f9 2b c2 89 44 24 08 75 19 5f 32 c0 5b 8b 8c 24 84 08 00 00 e8 b2 ba 0c";
    var nfRunCommandScanResults = Memory.scanSync(csrModule.base, csrModule.size, nfRunCommandPattern);
    if (nfRunCommandScanResults.length != 0) {
      nfRunCommand = new NativeFunction(nfRunCommandScanResults[0].address, "bool", ["pointer", "pointer"], 'thiscall');
    } else {
      console.log("Could not locate the nfRunCommand. Aborting...");
      return;
    }

    Interceptor.attach(nfRunCommand, {
      onEnter: args => {
        if (logCommands) {
          this.command_line = args[0].readAnsiString();
        }
      },
      onLeave: (retval) => {
        if (logCommands && checkNotExcluded(this.command_line)) {
          console.log("\"" + this.command_line + "\" " + (retval.toInt32() & 0xFF));
        }
      }
    });

    global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd)) };
            
    // 0x005146E0 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x81, 0xec, 0x88, 0x08, 0x00, 0x00, 0xa1, 0x18, 0x25, 0x65,
    //   0x00, 0x53, 0x8b, 0x9c, 0x24, 0x90, 0x08, 0x00, 0x00, 0x89,
    //   0x84, 0x24, 0x88, 0x08, 0x00, 0x00, 0x8b, 0xc3, 0x57, 0x8b,
    //   0xf9, 0x8d, 0x50, 0x01, 0x8a, 0x08, 0x40, 0x84, 0xc9, 0x75,
    //   0xf9, 0x2b, 0xc2, 0x89, 0x44, 0x24, 0x08, 0x75, 0x19, 0x5f,
    //   0x32, 0xc0, 0x5b, 0x8b, 0x8c, 0x24, 0x84, 0x08, 0x00, 0x00,
    //   0xe8, 0xb2, 0xba, 0x0c
    // };
 
    var npRegisterCommand;
    var npRegisterCommandPattern = "51 53 55 56 57 8b d9 68 dc 00 00 00 89 5c 24 14 e8 25 bc 0c 00 33 f6 83 c4 04 3b c6 74 16 89 b0 d4 00 00 00 89 b0 d8 00 00 00 89 b0 d0 00 00 00 8b e8 eb 02 33 ed 8b 7c 24 18 8b d7 8b c5 2b d5";
    var npRegisterCommandScanResults = Memory.scanSync(csrModule.base, csrModule.size, npRegisterCommandPattern);
    if (npRegisterCommandScanResults.length != 0) {
      npRegisterCommand = npRegisterCommandScanResults[0].address;
    } else {
      console.log("Could not locate the npRegisterCommand. Aborting...");
      return;
    }

    Interceptor.attach(npRegisterCommand, {
      onEnter: args => {
        commandNames.push(args[0].readAnsiString());
      }
    });

    global.dumpCommandNames = () => { console.log(commandNames); };
    global.dumpCommandNamesPretty = () => { console.log(commandNames.join("\n")); };

    // 0x00514310 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x51, 0x53, 0x55, 0x56, 0x57, 0x8b, 0xd9, 0x68, 0xdc, 0x00,
    //   0x00, 0x00, 0x89, 0x5c, 0x24, 0x14, 0xe8, 0x25, 0xbc, 0x0c,
    //   0x00, 0x33, 0xf6, 0x83, 0xc4, 0x04, 0x3b, 0xc6, 0x74, 0x16,
    //   0x89, 0xb0, 0xd4, 0x00, 0x00, 0x00, 0x89, 0xb0, 0xd8, 0x00,
    //   0x00, 0x00, 0x89, 0xb0, 0xd0, 0x00, 0x00, 0x00, 0x8b, 0xe8,
    //   0xeb, 0x02, 0x33, 0xed, 0x8b, 0x7c, 0x24, 0x18, 0x8b, 0xd7,
    //   0x8b, 0xc5, 0x2b, 0xd5
    // };
  },

  ////////////
  // APlagueTaleInnocence_x64 //
  ////////////

  "aplaguetaleinnocence_x64": () => {
    const aptModule = Process.enumerateModules()[0];

    for (const module of Process.enumerateModules()) {
      Memory.protect(module.base, module.size, "rwx");
    }
    
    var nppGlobalCommandState;
    var nppGlobalCommandStatePattern = "48 8b 0d ?? ?? bb 00 4c 8d 9c 24 f0 00 00 00 49 8b 5b 38 49 8b 6b 40 49 8b 73 48 49 8b e3 41 5f 41 5e 41 5d 41 5c 5f e9 ?? ?? dc ff cc cc cc cc cc cc cc cc cc 48 8b c4 55 57 41 54 41 56 41 57";
    var nppGlobalCommandStateScanResults = Memory.scanSync(aptModule.base, aptModule.size, nppGlobalCommandStatePattern);
    if (nppGlobalCommandStateScanResults.length != 0) {
      var callsiteAddress = nppGlobalCommandStateScanResults[0].address;
      var offsetGlobalCommandState = callsiteAddress.add(3).readU32();
      nppGlobalCommandState = callsiteAddress.add(offsetGlobalCommandState + 7);
    } else {
      console.log("Could not locate the nppGlobalCommandState. Aborting...");
      return;
    }
    //  Aggregate
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x48, 0x8b, 0x0d, ??, ??, 0xbb, 0x00, 0x4c, 0x8d, 0x9c,
    //   0x24, 0xf0, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x5b, 0x38, 0x49,
    //   0x8b, 0x6b, 0x40, 0x49, 0x8b, 0x73, 0x48, 0x49, 0x8b, 0xe3,
    //   0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0xe9,
    //   ??, ??, 0xdc, 0xff, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
    //   0xcc, 0xcc, 0xcc, 0x48, 0x8b, 0xc4, 0x55, 0x57, 0x41, 0x54,
    //   0x41, 0x56, 0x41, 0x57
    // };

    // 0x000000014151FFF0 EGS
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x48, 0x8b, 0x0d, 0x8e, 0x91, 0xbb, 0x00, 0x4c, 0x8d, 0x9c,
    //   0x24, 0xf0, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x5b, 0x38, 0x49,
    //   0x8b, 0x6b, 0x40, 0x49, 0x8b, 0x73, 0x48, 0x49, 0x8b, 0xe3,
    //   0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0xe9,
    //   0xf9, 0x40, 0xdc, 0xff, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
    //   0xcc, 0xcc, 0xcc, 0x48, 0x8b, 0xc4, 0x55, 0x57, 0x41, 0x54,
    //   0x41, 0x56, 0x41, 0x57
    // };

    // 0x0000000141520660 Steam
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x48, 0x8b, 0x0d, 0x4e, 0x95, 0xbb, 0x00, 0x4c, 0x8d, 0x9c,
    //   0x24, 0xf0, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x5b, 0x38, 0x49,
    //   0x8b, 0x6b, 0x40, 0x49, 0x8b, 0x73, 0x48, 0x49, 0x8b, 0xe3,
    //   0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0xe9,
    //   0xc9, 0x3e, 0xdc, 0xff, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
    //   0xcc, 0xcc, 0xcc, 0x48, 0x8b, 0xc4, 0x55, 0x57, 0x41, 0x54,
    //   0x41, 0x56, 0x41, 0x57
    // };

    var nfRunCommand;
    var nfRunCommandPattern = "44 89 44 24 18 48 89 54 24 10 55 56 57 41 54 41 55 41 56 41 57 48 8d ac 24 90 7e ff ff b8 70 82 00 00 e8 ?? ?? 67 00 48 2b e0 48 c7 44 24 30 fe ff ff ff 48 89 9c 24 b0 82 00 00 0f 29 b4 24 60";
    var nfRunCommandScanResults = Memory.scanSync(aptModule.base, aptModule.size, nfRunCommandPattern);
    if (nfRunCommandScanResults.length != 0) {
      nfRunCommand = new NativeFunction(nfRunCommandScanResults[0].address, "bool", ["pointer", "pointer", "int64"], 'win64');
    } else {
      console.log("Could not locate the nfRunCommand. Aborting...");
      return;
    }

    Interceptor.attach(nfRunCommand, {
      onEnter: args => {
        if (logCommands) {
          this.command_line = this.context.rdx.readAnsiString();
        }
      },
      onLeave: (retval) => {
        if (logCommands && checkNotExcluded(this.command_line)) {
          console.log("\"" + this.command_line + "\" " + (retval.toInt32() & 0xFF));
        }
      }
    });

    global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) };
    // Aggregate
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x44, 0x89, 0x44, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10,
    //   0x55, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41,
    //   0x57, 0x48, 0x8d, 0xac, 0x24, 0x90, 0x7e, 0xff, 0xff, 0xb8,
    //   0x70, 0x82, 0x00, 0x00, 0xe8, ??, ??, 0x67, 0x00, 0x48,
    //   0x2b, 0xe0, 0x48, 0xc7, 0x44, 0x24, 0x30, 0xfe, 0xff, 0xff,
    //   0xff, 0x48, 0x89, 0x9c, 0x24, 0xb0, 0x82, 0x00, 0x00, 0x0f,
    //   0x29, 0xb4, 0x24, 0x60
    // };

    // 0x000000014072AF80 EGS
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x44, 0x89, 0x44, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10,
    //   0x55, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41,
    //   0x57, 0x48, 0x8d, 0xac, 0x24, 0x90, 0x7e, 0xff, 0xff, 0xb8,
    //   0x70, 0x82, 0x00, 0x00, 0xe8, 0x69, 0x06, 0x67, 0x00, 0x48,
    //   0x2b, 0xe0, 0x48, 0xc7, 0x44, 0x24, 0x30, 0xfe, 0xff, 0xff,
    //   0xff, 0x48, 0x89, 0x9c, 0x24, 0xb0, 0x82, 0x00, 0x00, 0x0f,
    //   0x29, 0xb4, 0x24, 0x60
    // };

    // 0x000000014072B000 Steam
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x44, 0x89, 0x44, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10,
    //   0x55, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41,
    //   0x57, 0x48, 0x8d, 0xac, 0x24, 0x90, 0x7e, 0xff, 0xff, 0xb8,
    //   0x70, 0x82, 0x00, 0x00, 0xe8, 0xf9, 0x07, 0x67, 0x00, 0x48,
    //   0x2b, 0xe0, 0x48, 0xc7, 0x44, 0x24, 0x30, 0xfe, 0xff, 0xff,
    //   0xff, 0x48, 0x89, 0x9c, 0x24, 0xb0, 0x82, 0x00, 0x00, 0x0f,
    //   0x29, 0xb4, 0x24, 0x60
    // };
  
    var npRegisterCommand;
    var npRegisterCommandPattern = "48 89 5c 24 18 55 56 57 41 54 41 55 41 56 41 57 48 83 ec 40 4d 8b e0 48 8b ea 48 8b f9 48 85 d2 74 16 4c 8b 05 ?? ?? df 00 48 8d 8c 24 80 00 00 00 e8 ?? ?? f2 ff eb 17 48 8b 05 ?? ?? df 00 48";
    var npRegisterCommandScanResults = Memory.scanSync(aptModule.base, aptModule.size, npRegisterCommandPattern);
    if (npRegisterCommandScanResults.length != 0) {
      npRegisterCommand = npRegisterCommandScanResults[0].address;
    } else {
      console.log("Could not locate the npRegisterCommand. Aborting...");
      return;
    }

    Interceptor.attach(npRegisterCommand, {
      onEnter: args => {
        commandNames.push(this.context.rdx.readAnsiString());
      }
    });
    global.dumpCommandNames = () => { console.log(commandNames); };
    global.dumpCommandNamesPretty = () => { console.log(commandNames.join("\n")); };
    // Aggregate
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x48, 0x89, 0x5c, 0x24, 0x18, 0x55, 0x56, 0x57, 0x41, 0x54,
    //   0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x40,
    //   0x4d, 0x8b, 0xe0, 0x48, 0x8b, 0xea, 0x48, 0x8b, 0xf9, 0x48,
    //   0x85, 0xd2, 0x74, 0x16, 0x4c, 0x8b, 0x05, ??, ??, 0xdf,
    //   0x00, 0x48, 0x8d, 0x8c, 0x24, 0x80, 0x00, 0x00, 0x00, 0xe8,
    //   ??, ??, 0xf2, 0xff, 0xeb, 0x17, 0x48, 0x8b, 0x05, ??,
    //   ??, 0xdf, 0x00, 0x48
    // };

    // 0x000000014072AC60 EGS
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x48, 0x89, 0x5c, 0x24, 0x18, 0x55, 0x56, 0x57, 0x41, 0x54,
    //   0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x40,
    //   0x4d, 0x8b, 0xe0, 0x48, 0x8b, 0xea, 0x48, 0x8b, 0xf9, 0x48,
    //   0x85, 0xd2, 0x74, 0x16, 0x4c, 0x8b, 0x05, 0x4f, 0xc5, 0xdf,
    //   0x00, 0x48, 0x8d, 0x8c, 0x24, 0x80, 0x00, 0x00, 0x00, 0xe8,
    //   0xda, 0xa8, 0xf2, 0xff, 0xeb, 0x17, 0x48, 0x8b, 0x05, 0x39,
    //   0xc5, 0xdf, 0x00, 0x48
    // };

    // 0x000000014072ACE0 Steam
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x48, 0x89, 0x5c, 0x24, 0x18, 0x55, 0x56, 0x57, 0x41, 0x54,
    //   0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x40,
    //   0x4d, 0x8b, 0xe0, 0x48, 0x8b, 0xea, 0x48, 0x8b, 0xf9, 0x48,
    //   0x85, 0xd2, 0x74, 0x16, 0x4c, 0x8b, 0x05, 0x0f, 0xc7, 0xdf,
    //   0x00, 0x48, 0x8d, 0x8c, 0x24, 0x80, 0x00, 0x00, 0x00, 0xe8,
    //   0xfa, 0xa7, 0xf2, 0xff, 0xeb, 0x17, 0x48, 0x8b, 0x05, 0xf9,
    //   0xc6, 0xdf, 0x00, 0x48
    // };
  } //,

  // ////////////
  // // Rush //
  // ////////////

  // "rushx64": () => {
  //   const rushModule = Process.enumerateModules()[0];

  //   for (const module of Process.enumerateModules()) {
  //     Memory.protect(module.base, module.size, "rwx");
  //   }

  //   var nppGlobalCommandState = new NativePointer('');



  //   var nfRunCommand = new NativeFunction(new NativePointer(''), "bool", ["pointer", "pointer", "uint32"], 'win64');

  //   global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) };
    


  //   var npRegisterCommand = new NativePointer('');

  //   Interceptor.attach(npRegisterCommand, {
  //     onEnter: args => {
  //       commandNames.push(this.context.rdx.readAnsiString());
  //     }
  //   });

  //   global.dumpCommandNames = () => { console.log(commandNames); };
  // }
};

var gameSetup = games[Process.enumerateModules()[0].name.toLowerCase().split('.')[0]];

function checkNotExcluded(command) {
  command = command.toLowerCase();
  for (const excludedCommand of excludedCommands) {
    if (command.startsWith(excludedCommand)) {
      return false;
    }
  }
  return true;
}

if (gameSetup) {
  gameSetup();

  global.enableLogCommands = () => {
    logCommands = true;
  };

  global.disableLogCommands = () => {
    logCommands = false;
  };

  global.addExcludedCommand = command  => {
    excludedCommands.push(command.toLowerCase());
  };

  global.removeExcludedCommand = command => {
    command = command.toLowerCase();
    excludedCommands = excludedCommands.filter(item => item !== command);
  }

  global.clearExcludedCommands = () => {
    excludedCommands = [];
  }
} else {
  console.log("Unknown executable name. Unable to instrument.");
}
